{
  "version": 3,
  "sources": ["../../../server/chat-plugins/auction.ts"],
  "sourcesContent": ["/**\n * Chat plugin to run auctions for team tournaments.\n *\n * Based on the original Scrappie auction system\n * https://github.com/Hidden50/Pokemon-Showdown-Node-Bot/blob/master/commands/base-auctions.js\n * @author Karthik\n */\nimport {Net, Utils} from '../../lib';\n\ninterface Player {\n\tid: ID;\n\tname: string;\n\tteam?: Team;\n\tprice: number;\n\ttiers?: string[];\n}\n\ninterface Manager {\n\tid: ID;\n\tteam: Team;\n}\n\nclass Team {\n\tid: ID;\n\tname: string;\n\tplayers: Player[];\n\tcredits: number;\n\tsuspended: boolean;\n\tprivate auction: Auction;\n\tconstructor(name: string, auction: Auction) {\n\t\tthis.id = toID(name);\n\t\tthis.name = name;\n\t\tthis.players = [];\n\t\tthis.credits = auction.startingCredits;\n\t\tthis.suspended = false;\n\t\tthis.auction = auction;\n\t}\n\n\tgetManagers() {\n\t\treturn [...this.auction.managers.values()]\n\t\t\t.filter(m => m.team === this)\n\t\t\t.map(m => Users.getExact(m.id)?.name || m.id);\n\t}\n\n\taddPlayer(player: Player, price = 0) {\n\t\tplayer.team?.removePlayer(player);\n\t\tthis.players.push(player);\n\t\tthis.credits -= price;\n\t\tplayer.team = this;\n\t\tplayer.price = price;\n\t}\n\n\tremovePlayer(player: Player) {\n\t\tconst pIndex = this.players.indexOf(player);\n\t\tif (pIndex === -1) return;\n\t\tthis.players.splice(pIndex, 1);\n\t\tdelete player.team;\n\t\tplayer.price = 0;\n\t}\n\n\tisSuspended() {\n\t\treturn this.suspended || (\n\t\t\tthis.auction.type === 'snake' ?\n\t\t\t\tthis.players.length >= this.auction.minPlayers :\n\t\t\t\tthis.credits < this.auction.minBid\n\t\t);\n\t}\n\n\tmaxBid(credits = this.credits) {\n\t\treturn credits + this.auction.minBid * Math.min(0, this.players.length - this.auction.minPlayers + 1);\n\t}\n}\n\nfunction parseCredits(amount: string) {\n\tlet credits = Number(amount.replace(',', '.'));\n\tif (Math.abs(credits) < 500) credits *= 1000;\n\tif (!credits || credits % 500 !== 0) {\n\t\tthrow new Chat.ErrorMessage(`The amount of credits must be a multiple of 500.`);\n\t}\n\treturn credits;\n}\n\nexport class Auction extends Rooms.SimpleRoomGame {\n\toverride readonly gameid = 'auction' as ID;\n\towners: Set<ID> = new Set();\n\tteams: Map<string, Team> = new Map();\n\tmanagers: Map<string, Manager> = new Map();\n\tauctionPlayers: Map<string, Player> = new Map();\n\n\tstartingCredits: number;\n\tminBid = 3000;\n\tminPlayers = 10;\n\ttype: 'auction' | 'blind' | 'snake' = 'auction';\n\n\tlastQueue: Team[] | null = null;\n\tqueue: Team[] = [];\n\tnomTimer: NodeJS.Timer = null!;\n\tnomTimeLimit = 0;\n\tnomTimeRemaining = 0;\n\tbidTimer: NodeJS.Timer = null!;\n\tbidTimeLimit = 10;\n\tbidTimeRemaining = 10;\n\tnominatingTeam: Team = null!;\n\tnominatedPlayer: Player = null!;\n\thighestBidder: Team = null!;\n\thighestBid = 0;\n\t/** Used for blind mode */\n\tbidsPlaced: Map<Team, number> = new Map();\n\tstate: 'setup' | 'nom' | 'bid' = 'setup';\n\tconstructor(room: Room, startingCredits = 100000) {\n\t\tsuper(room);\n\t\tthis.title = 'Auction';\n\t\tthis.startingCredits = startingCredits;\n\t}\n\n\tsendMessage(message: string) {\n\t\tthis.room.add(`|c|&|${message}`).update();\n\t}\n\n\tsendHTMLBox(htmlContent: string) {\n\t\tthis.room.add(`|html|<div class=\"infobox\">${htmlContent}</div>`).update();\n\t}\n\n\tcheckOwner(user: User) {\n\t\tif (!this.owners.has(user.id) && !Users.Auth.hasPermission(user, 'declare', null, this.room)) {\n\t\t\tthrow new Chat.ErrorMessage(`You must be an auction owner to use this command.`);\n\t\t}\n\t}\n\n\taddOwners(users: string[]) {\n\t\tfor (const name of users) {\n\t\t\tconst user = Users.getExact(name);\n\t\t\tif (!user) throw new Chat.ErrorMessage(`User \"${name}\" not found.`);\n\t\t\tif (this.owners.has(user.id)) throw new Chat.ErrorMessage(`${user.name} is already an auction owner.`);\n\t\t\tthis.owners.add(user.id);\n\t\t}\n\t}\n\n\tremoveOwners(users: string[]) {\n\t\tfor (const name of users) {\n\t\t\tconst id = toID(name);\n\t\t\tif (!this.owners.has(id)) throw new Chat.ErrorMessage(`User \"${name}\" is not an auction owner.`);\n\t\t\tthis.owners.delete(id);\n\t\t}\n\t}\n\n\tgenerateUsernameList(players: (string | Player)[], max = players.length, clickable = false) {\n\t\tlet buf = `<span style=\"font-size: 85%\">`;\n\t\tbuf += players.slice(0, max).map(p => {\n\t\t\tif (typeof p === 'object') {\n\t\t\t\treturn `<username title=\"Tiers: ${p.tiers?.length ? `${Utils.escapeHTML(p.tiers.join(', '))}` : 'N/A'}\"${clickable ? ' class=\"username\"' : ''}>${Utils.escapeHTML(p.name)}</username>`;\n\t\t\t}\n\t\t\treturn `<username${clickable ? ' class=\"username\"' : ''}>${Utils.escapeHTML(p)}</username>`;\n\t\t}).join(', ');\n\t\tif (players.length > max) {\n\t\t\tbuf += ` <span title=\"${players.slice(max).map(p => Utils.escapeHTML(typeof p === 'object' ? p.name : p)).join(', ')}\">(+${players.length - max})</span>`;\n\t\t}\n\t\tbuf += `</span>`;\n\t\treturn buf;\n\t}\n\n\tgeneratePriceList() {\n\t\tconst players = Utils.sortBy(this.getDraftedPlayers(), p => -p.price);\n\t\tlet buf = '';\n\t\tlet smogonExport = '';\n\n\t\tfor (const team of this.teams.values()) {\n\t\t\tlet table = `<table>`;\n\t\t\tfor (const player of players.filter(p => p.team === team)) {\n\t\t\t\ttable += Utils.html`<tr><td>${player.name}</td><td>${player.price}</td></tr>`;\n\t\t\t}\n\t\t\ttable += `</table>`;\n\t\t\tbuf += `<details><summary>${Utils.escapeHTML(team.name)}</summary>${table}</details><br/>`;\n\t\t\tsmogonExport += `[SPOILER=\"${team.name}\"]${table.replace(/<(.*?)>/g, '[$1]')}[/SPOILER]`;\n\t\t}\n\n\t\tlet table = `<table>`;\n\t\tfor (const player of players) {\n\t\t\ttable += Utils.html`<tr><td>${player.name}</td><td>${player.price}</td></tr>`;\n\t\t}\n\t\ttable += `</table>`;\n\t\tbuf += `<details><summary>All</summary>${table}</details><br/>`;\n\t\tsmogonExport += `[SPOILER=\"All\"]${table.replace(/<(.*?)>/g, '[$1]')}[/SPOILER]`;\n\n\t\tbuf += Utils.html`<copytext value=\"${smogonExport}\">Copy Smogon Export</copytext>`;\n\t\treturn buf;\n\t}\n\n\tgenerateAuctionTable(ended = false) {\n\t\tconst queue = this.queue.filter(team => !team.isSuspended());\n\t\tlet buf = `<div class=\"ladder pad\"><table style=\"width: 100%\"><tr>${!ended ? `<th colspan=2>Order</th>` : ''}<th>Team</th><th>Credits</th><th>Players</th></tr>`;\n\t\tfor (const team of this.teams.values()) {\n\t\t\tbuf += `<tr>`;\n\t\t\tif (!ended) {\n\t\t\t\tlet i1 = queue.indexOf(team) + 1;\n\t\t\t\tlet i2 = queue.lastIndexOf(team) + 1;\n\t\t\t\tif (i1 > queue.length / 2) {\n\t\t\t\t\t[i1, i2] = [i2, i1];\n\t\t\t\t}\n\t\t\t\tbuf += `<td align=\"center\" style=\"width: 15px\">${i1 || '-'}</td><td align=\"center\" style=\"width: 15px\">${i2 || '-'}</td>`;\n\t\t\t}\n\t\t\tbuf += `<td style=\"white-space: nowrap\"><strong>${Utils.escapeHTML(team.name)}</strong><br/>${this.generateUsernameList(team.getManagers(), 2, true)}</td>`;\n\t\t\tbuf += `<td style=\"white-space: nowrap\">${team.credits.toLocaleString()}${team.maxBid() >= this.minBid ? `<br/><span style=\"font-size: 90%\">Max bid: ${team.maxBid().toLocaleString()}</span>` : ''}</td>`;\n\t\t\tbuf += `<td><div style=\"min-height: 32px${!ended ? `; height: 32px; overflow: hidden; resize: vertical` : ''}\"><span style=\"float: right\">${team.players.length}</span>${this.generateUsernameList(team.players)}</div></td>`;\n\t\t\tbuf += `</tr>`;\n\t\t}\n\t\tbuf += `</table></div>`;\n\n\t\tconst players = Utils.sortBy(this.getUndraftedPlayers(), p => p.name);\n\t\tconst tierArrays = new Map<string, Player[]>();\n\t\tfor (const player of players) {\n\t\t\tif (!player.tiers) continue;\n\t\t\tfor (const tier of player.tiers) {\n\t\t\t\tif (!tierArrays.has(tier)) tierArrays.set(tier, []);\n\t\t\t\ttierArrays.get(tier)!.push(player);\n\t\t\t}\n\t\t}\n\t\tconst sortedTiers = [...tierArrays.keys()].sort();\n\t\tif (sortedTiers.length) {\n\t\t\tbuf += `<details><summary>Remaining Players (${players.length})</summary>`;\n\t\t\tbuf += `<details><summary>All</summary>${this.generateUsernameList(players)}</details>`;\n\t\t\tbuf += `<details><summary>Tiers</summary><ul style=\"list-style-type: none\">`;\n\t\t\tfor (const tier of sortedTiers) {\n\t\t\t\tconst tierPlayers = tierArrays.get(tier)!;\n\t\t\t\tbuf += `<li><details><summary>${Utils.escapeHTML(tier)} (${tierPlayers.length})</summary>${this.generateUsernameList(tierPlayers)}</details></li>`;\n\t\t\t}\n\t\t\tbuf += `</ul></details></details>`;\n\t\t} else {\n\t\t\tbuf += `<details><summary>Remaining Players (${players.length})</summary>${this.generateUsernameList(players)}</details>`;\n\t\t}\n\t\tbuf += `<details><summary>Auction Settings</summary>`;\n\t\tbuf += `- Minimum bid: <b>${this.minBid.toLocaleString()}</b><br/>`;\n\t\tbuf += `- Minimum players per team: <b>${this.minPlayers}</b><br/>`;\n\t\tbuf += `- Nom timer: <b>${this.nomTimeLimit ? `${this.nomTimeLimit}s` : 'Off'}</b><br/>`;\n\t\tif (this.type !== 'snake') buf += `- Bid timer: <b>${this.bidTimeLimit}s</b><br/>`;\n\t\tbuf += `- Auction type: <b>${this.type}</b><br/>`;\n\t\tbuf += `</details>`;\n\t\treturn buf;\n\t}\n\n\tsendBidInfo() {\n\t\tlet buf = `<div class=\"infobox\">`;\n\t\tbuf += Utils.html`Player: <username>${this.nominatedPlayer.name}</username> `;\n\t\tbuf += `Top bid: <b>${this.highestBid}</b> `;\n\t\tbuf += Utils.html`Top bidder: <b>${this.highestBidder.name}</b> `;\n\t\tbuf += Utils.html`Tiers: <b>${this.nominatedPlayer.tiers?.length ? `${this.nominatedPlayer.tiers.join(', ')}` : 'N/A'}</b>`;\n\t\tbuf += `</div>`;\n\t\tthis.room.add(`|uhtml|bid-${this.nominatedPlayer.id}|${buf}`).update();\n\t}\n\n\tsendTimer(change = false, nom = false) {\n\t\tlet buf = `<div class=\"infobox message-error\">`;\n\t\tbuf += `<i class=\"fa fa-hourglass-start\"></i> ${Chat.toDurationString((nom ? this.nomTimeRemaining : this.bidTimeRemaining) * 1000, {hhmmss: true}).slice(1)}`;\n\t\tbuf += `</div>`;\n\t\tthis.room.add(`|uhtml${change ? 'change' : ''}|timer|${buf}`).update();\n\t}\n\n\tsetMinBid(amount: number) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`The minimum bid cannot be changed after the auction has started.`);\n\t\t}\n\t\tif (amount > 500000) throw new Chat.ErrorMessage(`The minimum bid must not exceed 500,000.`);\n\t\tthis.minBid = amount;\n\t}\n\n\tsetMinPlayers(amount: number) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`The minimum number of players cannot be changed after the auction has started.`);\n\t\t}\n\t\tif (!amount || amount > 30) {\n\t\t\tthrow new Chat.ErrorMessage(`The minimum number of players must be between 1 and 30.`);\n\t\t}\n\t\tthis.minPlayers = amount;\n\t}\n\n\tsetNomTimeLimit(seconds: number) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`The nomination time limit cannot be changed after the auction has started.`);\n\t\t}\n\t\tif (isNaN(seconds) || (seconds && (seconds < 7 || seconds > 300))) {\n\t\t\tthrow new Chat.ErrorMessage(`The nomination time limit must be between 7 and 300 seconds.`);\n\t\t}\n\t\tthis.nomTimeLimit = this.nomTimeRemaining = seconds;\n\t}\n\n\tsetBidTimeLimit(seconds: number) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`The bid time limit cannot be changed after the auction has started.`);\n\t\t}\n\t\tif (!seconds || seconds < 7 || seconds > 120) {\n\t\t\tthrow new Chat.ErrorMessage(`The bid time limit must be between 7 and 120 seconds.`);\n\t\t}\n\t\tthis.bidTimeLimit = this.bidTimeRemaining = seconds;\n\t}\n\n\tsetType(auctionType: string) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`The auction type cannot be changed after the auction has started.`);\n\t\t}\n\t\tif (!['auction', 'blind', 'snake'].includes(toID(auctionType))) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid auction type \"${auctionType}\". Valid types are \"auction\", \"blind\", and \"snake\".`);\n\t\t}\n\t\tthis.type = toID(auctionType) as 'auction' | 'blind' | 'snake';\n\t\tthis.nomTimeLimit = this.nomTimeRemaining = this.type === 'snake' ? 60 : 0;\n\t\tthis.bidTimeLimit = this.bidTimeRemaining = this.type === 'blind' ? 30 : 10;\n\t}\n\n\tgetUndraftedPlayers() {\n\t\treturn [...this.auctionPlayers.values()].filter(p => !p.team);\n\t}\n\n\tgetDraftedPlayers() {\n\t\treturn [...this.auctionPlayers.values()].filter(p => p.team);\n\t}\n\n\timportPlayers(data: string) {\n\t\tif (this.state !== 'setup') {\n\t\t\tthrow new Chat.ErrorMessage(`Player lists cannot be imported after the auction has started.`);\n\t\t}\n\t\tconst rows = data.replace('\\r', '').split('\\n');\n\t\tconst tierNames = rows.shift()!.split('\\t').slice(1);\n\t\tconst playerList = new Map<string, Player>();\n\t\tfor (const row of rows) {\n\t\t\tconst tiers = [];\n\t\t\tconst [name, ...tierData] = row.split('\\t');\n\t\t\tfor (let i = 0; i < tierData.length; i++) {\n\t\t\t\tif (['y', 'Y', '\\u2713', '\\u2714'].includes(tierData[i].trim())) {\n\t\t\t\t\tif (!tierNames[i]) throw new Chat.ErrorMessage(`Invalid tier data found in the pastebin.`);\n\t\t\t\t\tif (tierNames[i].length > 30) throw new Chat.ErrorMessage(`Tier names must be 30 characters or less.`);\n\t\t\t\t\ttiers.push(tierNames[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (name.length > 25) throw new Chat.ErrorMessage(`Player names must be 25 characters or less.`);\n\t\t\tconst player: Player = {\n\t\t\t\tid: toID(name),\n\t\t\t\tname,\n\t\t\t\tprice: 0,\n\t\t\t};\n\t\t\tif (tiers.length) player.tiers = tiers;\n\t\t\tplayerList.set(player.id, player);\n\t\t}\n\t\tthis.auctionPlayers = playerList;\n\t}\n\n\taddAuctionPlayer(name: string, tiers?: string[]) {\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Players cannot be added during a nomination.`);\n\t\tif (name.length > 25) throw new Chat.ErrorMessage(`Player names must be 25 characters or less.`);\n\t\tconst player: Player = {\n\t\t\tid: toID(name),\n\t\t\tname,\n\t\t\tprice: 0,\n\t\t};\n\t\tif (tiers?.length) {\n\t\t\tif (tiers.some(tier => tier.length > 30)) {\n\t\t\t\tthrow new Chat.ErrorMessage(`Tier names must be 30 characters or less.`);\n\t\t\t}\n\t\t\tplayer.tiers = tiers;\n\t\t}\n\t\tthis.auctionPlayers.set(player.id, player);\n\t\treturn player;\n\t}\n\n\tremoveAuctionPlayer(name: string) {\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Players cannot be removed during a nomination.`);\n\t\tconst player = this.auctionPlayers.get(toID(name));\n\t\tif (!player) throw new Chat.ErrorMessage(`Player \"${name}\" not found.`);\n\t\tplayer.team?.removePlayer(player);\n\t\tthis.auctionPlayers.delete(player.id);\n\t\tif (this.state !== 'setup' && !this.getUndraftedPlayers().length) {\n\t\t\tthis.end('The auction has ended because there are no players remaining in the draft pool.');\n\t\t}\n\t\treturn player;\n\t}\n\n\tassignPlayer(name: string, teamName?: string) {\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Players cannot be assigned during a nomination.`);\n\t\tconst player = this.auctionPlayers.get(toID(name));\n\t\tif (!player) throw new Chat.ErrorMessage(`Player \"${name}\" not found.`);\n\t\tif (teamName) {\n\t\t\tconst team = this.teams.get(toID(teamName));\n\t\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\n\t\t\tteam.addPlayer(player);\n\t\t\tif (!this.getUndraftedPlayers().length) {\n\t\t\t\treturn this.end('The auction has ended because there are no players remaining in the draft pool.');\n\t\t\t}\n\t\t} else {\n\t\t\tplayer.team?.removePlayer(player);\n\t\t}\n\t}\n\n\taddTeam(name: string) {\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`Teams cannot be added after the auction has started.`);\n\t\tif (name.length > 40) throw new Chat.ErrorMessage(`Team names must be 40 characters or less.`);\n\t\tconst team = new Team(name, this);\n\t\tthis.teams.set(team.id, team);\n\t\tconst teams = [...this.teams.values()];\n\t\tthis.queue = teams.concat(teams.slice().reverse());\n\t\treturn team;\n\t}\n\n\tremoveTeam(name: string) {\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`Teams cannot be removed after the auction has started.`);\n\t\tconst team = this.teams.get(toID(name));\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\n\t\tthis.queue = this.queue.filter(t => t !== team);\n\t\tthis.teams.delete(team.id);\n\t\treturn team;\n\t}\n\n\tsuspendTeam(name: string) {\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Teams cannot be suspended during a nomination.`);\n\t\tconst team = this.teams.get(toID(name));\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\n\t\tif (team.suspended) throw new Chat.ErrorMessage(`Team ${name} is already suspended.`);\n\t\tif (this.nominatingTeam === team) throw new Chat.ErrorMessage(`The nominating team cannot be suspended.`);\n\t\tteam.suspended = true;\n\t\treturn team;\n\t}\n\n\tunsuspendTeam(name: string) {\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Teams cannot be unsuspended during a nomination.`);\n\t\tconst team = this.teams.get(toID(name));\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${name}\" not found.`);\n\t\tif (!team.suspended) throw new Chat.ErrorMessage(`Team ${name} is not suspended.`);\n\t\tteam.suspended = false;\n\t\treturn team;\n\t}\n\n\taddManagers(teamName: string, users: string[]) {\n\t\tconst team = this.teams.get(toID(teamName));\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\n\t\tconst problemUsers = users.filter(user => !toID(user) || toID(user).length > 18);\n\t\tif (problemUsers.length) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid usernames: ${problemUsers.join(', ')}`);\n\t\t}\n\t\tfor (const id of users.map(toID)) {\n\t\t\tconst manager = this.managers.get(id);\n\t\t\tif (!manager) {\n\t\t\t\tthis.managers.set(id, {id, team});\n\t\t\t} else {\n\t\t\t\tmanager.team = team;\n\t\t\t}\n\t\t}\n\t\treturn team;\n\t}\n\n\tremoveManagers(users: string[]) {\n\t\tconst problemUsers = users.filter(user => !this.managers.has(toID(user)));\n\t\tif (problemUsers.length) {\n\t\t\tthrow new Chat.ErrorMessage(`Invalid managers: ${problemUsers.join(', ')}`);\n\t\t}\n\t\tfor (const id of users.map(toID)) {\n\t\t\tthis.managers.delete(id);\n\t\t}\n\t}\n\n\taddCreditsToTeam(teamName: string, amount: number) {\n\t\tif (this.type === 'snake') throw new Chat.ErrorMessage(`Snake draft does not support credits.`);\n\t\tif (this.state === 'bid') throw new Chat.ErrorMessage(`Credits cannot be changed during a nomination.`);\n\t\tconst team = this.teams.get(toID(teamName));\n\t\tif (!team) throw new Chat.ErrorMessage(`Team \"${teamName}\" not found.`);\n\t\tconst newCredits = team.credits + amount;\n\t\tif (newCredits <= 0 || newCredits > 10000000) {\n\t\t\tthrow new Chat.ErrorMessage(`A team must have between 0 and 10,000,000 credits.`);\n\t\t}\n\t\tif (team.maxBid(newCredits) < this.minBid) {\n\t\t\tthrow new Chat.ErrorMessage(`A team must have enough credits to draft the minimum amount of players.`);\n\t\t}\n\t\tteam.credits = newCredits;\n\t\treturn team;\n\t}\n\n\tstart() {\n\t\tif (this.state !== 'setup') throw new Chat.ErrorMessage(`The auction has already started.`);\n\t\tif (this.teams.size < 2) throw new Chat.ErrorMessage(`The auction needs at least 2 teams to start.`);\n\t\tconst problemTeams = [...this.teams.values()].filter(t => t.maxBid() < this.minBid).map(t => t.name);\n\t\tif (problemTeams.length) {\n\t\t\tthrow new Chat.ErrorMessage(`The following teams do not have enough credits to draft the minimum amount of players: ${problemTeams.join(', ')}`);\n\t\t}\n\t\tthis.next();\n\t}\n\n\treset() {\n\t\tconst teams = [...this.teams.values()];\n\t\tfor (const team of teams) {\n\t\t\tteam.credits = this.startingCredits;\n\t\t\tteam.suspended = false;\n\t\t\tfor (const player of team.players) {\n\t\t\t\tdelete player.team;\n\t\t\t\tplayer.price = 0;\n\t\t\t}\n\t\t\tteam.players = [];\n\t\t}\n\t\tthis.lastQueue = null;\n\t\tthis.queue = teams.concat(teams.slice().reverse());\n\t\tthis.clearNomTimer();\n\t\tthis.clearBidTimer();\n\t\tthis.state = 'setup';\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\n\t}\n\n\tnext() {\n\t\tthis.state = 'nom';\n\t\tif (!this.queue.filter(team => !team.isSuspended()).length) {\n\t\t\treturn this.end('The auction has ended because there are no teams remaining that can draft players.');\n\t\t}\n\t\tif (!this.getUndraftedPlayers().length) {\n\t\t\treturn this.end('The auction has ended because there are no players remaining in the draft pool.');\n\t\t}\n\t\tdo {\n\t\t\tthis.nominatingTeam = this.queue.shift()!;\n\t\t\tthis.queue.push(this.nominatingTeam);\n\t\t} while (this.nominatingTeam.isSuspended());\n\t\tthis.sendHTMLBox(this.generateAuctionTable());\n\t\tthis.sendMessage(`/html It is now <b>${Utils.escapeHTML(this.nominatingTeam.name)}</b>'s turn to nominate a player. Managers: ${this.nominatingTeam.getManagers().map(m => `<username class=\"username\">${Utils.escapeHTML(m)}</username>`).join(' ')}`);\n\t\tif (this.nomTimeLimit) {\n\t\t\tthis.sendTimer(false, true);\n\t\t\tthis.nomTimer = setInterval(() => this.pokeNomTimer(), 1000);\n\t\t}\n\t}\n\n\tnominate(user: User, target: string) {\n\t\tif (this.state !== 'nom') throw new Chat.ErrorMessage(`You cannot nominate players right now.`);\n\t\tconst manager = this.managers.get(user.id);\n\t\tif (!manager || manager.team !== this.nominatingTeam) this.checkOwner(user);\n\n\t\t// For undo\n\t\tthis.lastQueue = this.queue.slice();\n\t\tthis.lastQueue.unshift(this.lastQueue.pop()!);\n\n\t\tconst player = this.auctionPlayers.get(toID(target));\n\t\tif (!player) throw new Chat.ErrorMessage(`${target} is not a valid player.`);\n\t\tif (player.team) throw new Chat.ErrorMessage(`${player.name} has already been drafted.`);\n\t\tthis.clearNomTimer();\n\t\tthis.nominatedPlayer = player;\n\t\tif (this.type === 'snake') {\n\t\t\tthis.sendMessage(Utils.html`/html <b>${this.nominatingTeam.name}</b> drafted <username>${this.nominatedPlayer.name}</username>!`);\n\t\t\tthis.nominatingTeam.addPlayer(this.nominatedPlayer);\n\t\t\tthis.next();\n\t\t} else {\n\t\t\tthis.state = 'bid';\n\t\t\tthis.highestBid = this.minBid;\n\t\t\tthis.highestBidder = this.nominatingTeam;\n\t\t\tthis.room.add(Utils.html`|notify|${this.room.title} Auction|${player.name} has been nominated!`);\n\t\t\tthis.sendMessage(Utils.html`/html <username class=\"username\">${user.name}</username> from team <b>${this.nominatingTeam.name}</b> has nominated <username>${player.name}</username> for auction. Use /bid or type a number to place a bid!`);\n\t\t\tif (this.type === 'auction') this.sendBidInfo();\n\t\t\tthis.sendTimer();\n\t\t\tthis.bidTimer = setInterval(() => this.pokeBidTimer(), 1000);\n\t\t}\n\t}\n\n\tbid(user: User, bid: number) {\n\t\tif (this.state !== 'bid') throw new Chat.ErrorMessage(`There are no players up for auction right now.`);\n\t\tconst team = this.managers.get(user.id)?.team;\n\t\tif (!team) throw new Chat.ErrorMessage(`Only managers can bid on players.`);\n\t\tif (team.isSuspended()) throw new Chat.ErrorMessage(`Your team is suspended and cannot place bids.`);\n\n\t\tif (bid > team.maxBid()) throw new Chat.ErrorMessage(`Your team cannot afford to bid that much.`);\n\n\t\tif (this.type === 'blind') {\n\t\t\tif (this.bidsPlaced.has(team)) throw new Chat.ErrorMessage(`Your team has already placed a bid.`);\n\t\t\tif (bid <= this.minBid) throw new Chat.ErrorMessage(`Your bid must be higher than the minimum bid.`);\n\t\t\tfor (const manager of this.managers.values()) {\n\t\t\t\tif (manager.team !== team) continue;\n\t\t\t\tconst msg = `|c:|${Math.floor(Date.now() / 1000)}|&|/html Your team placed a bid of <b>${bid}</b> on <username>${Utils.escapeHTML(this.nominatedPlayer.name)}</username>.`;\n\t\t\t\tUsers.getExact(manager.id)?.sendTo(this.room, msg);\n\t\t\t}\n\t\t\tif (bid > this.highestBid) {\n\t\t\t\tthis.highestBid = bid;\n\t\t\t\tthis.highestBidder = team;\n\t\t\t}\n\t\t\tthis.bidsPlaced.set(team, bid);\n\t\t\tif (this.bidsPlaced.size === this.teams.size) {\n\t\t\t\tthis.finishCurrentNom();\n\t\t\t}\n\t\t} else {\n\t\t\tif (bid <= this.highestBid) throw new Chat.ErrorMessage(`Your bid must be higher than the current bid.`);\n\t\t\tthis.highestBid = bid;\n\t\t\tthis.highestBidder = team;\n\t\t\tthis.sendMessage(Utils.html`/html <username class=\"username\">${user.name}</username>[${team.name}]: <b>${bid}</b>`);\n\t\t\tthis.clearBidTimer();\n\t\t\tthis.bidTimer = setInterval(() => this.pokeBidTimer(), 1000);\n\t\t\tthis.sendBidInfo();\n\t\t\tthis.sendTimer();\n\t\t}\n\t}\n\n\tonChatMessage(message: string, user: User) {\n\t\tif (this.state !== 'bid' || !Number(message.replace(',', '.'))) return;\n\t\tthis.bid(user, parseCredits(message));\n\t\treturn '';\n\t}\n\n\tskipNom() {\n\t\tif (this.state !== 'nom') throw new Chat.ErrorMessage(`Nominations cannot be skipped right now.`);\n\t\tthis.nominatedPlayer = null!;\n\t\tthis.sendMessage(`**${this.nominatingTeam.name}**'s nomination turn has been skipped!`);\n\t\tthis.clearNomTimer();\n\t\tthis.next();\n\t}\n\n\tfinishCurrentNom() {\n\t\tif (this.type === 'blind') {\n\t\t\tlet buf = `<div class=\"ladder pad\"><table><tr><th>Team</th><th>Bid</th></tr>`;\n\t\t\tif (!this.bidsPlaced.has(this.nominatingTeam)) {\n\t\t\t\tbuf += Utils.html`<tr><td>${this.nominatingTeam.name}</td><td>${this.minBid}</td></tr>`;\n\t\t\t}\n\t\t\tfor (const [team, bid] of this.bidsPlaced) {\n\t\t\t\tbuf += Utils.html`<tr><td>${team.name}</td><td>${bid}</td></tr>`;\n\t\t\t}\n\t\t\tbuf += `</table></div>`;\n\t\t\tthis.sendHTMLBox(buf);\n\t\t\tthis.bidsPlaced.clear();\n\t\t}\n\t\tthis.sendMessage(Utils.html`/html <b>${this.highestBidder.name}</b> bought <username>${this.nominatedPlayer.name}</username> for <b>${this.highestBid}</b> credits!`);\n\t\tthis.highestBidder.addPlayer(this.nominatedPlayer, this.highestBid);\n\t\tthis.clearBidTimer();\n\t\tthis.next();\n\t}\n\n\tundoLastNom() {\n\t\tif (this.state !== 'nom') throw new Chat.ErrorMessage(`Nominations cannot be undone right now.`);\n\t\tif (!this.lastQueue) throw new Chat.ErrorMessage(`Only one nomination can be undone at a time.`);\n\t\tthis.queue = this.lastQueue;\n\t\tthis.lastQueue = null;\n\t\tif (this.nominatedPlayer) {\n\t\t\tthis.highestBidder.removePlayer(this.nominatedPlayer);\n\t\t\tthis.highestBidder.credits += this.highestBid;\n\t\t}\n\t\tthis.next();\n\t}\n\n\tclearNomTimer() {\n\t\tclearInterval(this.nomTimer);\n\t\tthis.nomTimeRemaining = this.nomTimeLimit;\n\t\tthis.room.add('|uhtmlchange|timer|');\n\t}\n\n\tclearBidTimer() {\n\t\tclearInterval(this.bidTimer);\n\t\tthis.bidTimeRemaining = this.bidTimeLimit;\n\t\tthis.room.add('|uhtmlchange|timer|');\n\t}\n\n\tpokeNomTimer() {\n\t\tthis.nomTimeRemaining--;\n\t\tif (!this.nomTimeRemaining) {\n\t\t\tthis.skipNom();\n\t\t} else {\n\t\t\tthis.sendTimer(true, true);\n\t\t\tif (this.nomTimeRemaining % 30 === 0 || [20, 10, 5].includes(this.nomTimeRemaining)) {\n\t\t\t\tthis.sendMessage(`/html <span class=\"message-error\">${this.nomTimeRemaining} seconds left!</span>`);\n\t\t\t}\n\t\t}\n\t}\n\n\tpokeBidTimer() {\n\t\tthis.bidTimeRemaining--;\n\t\tif (!this.bidTimeRemaining) {\n\t\t\tthis.finishCurrentNom();\n\t\t} else {\n\t\t\tthis.sendTimer(true);\n\t\t\tif (this.bidTimeRemaining % 30 === 0 || [20, 10, 5].includes(this.bidTimeRemaining)) {\n\t\t\t\tthis.sendMessage(`/html <span class=\"message-error\">${this.bidTimeRemaining} seconds left!</span>`);\n\t\t\t}\n\t\t}\n\t}\n\n\tend(message?: string) {\n\t\tthis.sendHTMLBox(this.generateAuctionTable(true));\n\t\tthis.sendHTMLBox(this.generatePriceList());\n\t\tif (message) this.sendMessage(message);\n\t\tthis.destroy();\n\t}\n\n\tdestroy() {\n\t\tthis.clearNomTimer();\n\t\tthis.clearBidTimer();\n\t\tsuper.destroy();\n\t}\n}\n\nexport const commands: Chat.ChatCommands = {\n\tauction: {\n\t\tcreate(target, room, user) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('minigame', null, room);\n\t\t\tif (room.game) return this.errorReply(`There is already a game of ${room.game.title} in progress in this room.`);\n\t\t\tif (room.settings.auctionDisabled) return this.errorReply('Auctions are currently disabled in this room.');\n\n\t\t\tlet startingCredits;\n\t\t\tif (target) {\n\t\t\t\tstartingCredits = parseCredits(target);\n\t\t\t\tif (startingCredits < 10000 || startingCredits > 10000000) {\n\t\t\t\t\treturn this.errorReply(`Starting credits must be between 10,000 and 10,000,000.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst auction = new Auction(room, startingCredits);\n\t\t\tauction.addOwners([user.id]);\n\t\t\troom.game = auction;\n\t\t\tthis.addModAction(`An auction was created by ${user.name}.`);\n\t\t\tthis.modlog(`AUCTION CREATE`);\n\t\t},\n\t\tcreatehelp: [\n\t\t\t`/auction create [startingcredits] - Creates an auction. Requires: % @ # &`,\n\t\t],\n\t\tstart(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tauction.start();\n\t\t\tthis.addModAction(`The auction was started by ${user.name}.`);\n\t\t\tthis.modlog(`AUCTION START`);\n\t\t},\n\t\treset(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tauction.reset();\n\t\t\tthis.addModAction(`The auction was reset by ${user.name}.`);\n\t\t\tthis.modlog(`AUCTION RESET`);\n\t\t},\n\t\tdelete: 'end',\n\t\tstop: 'end',\n\t\tend(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tauction.end();\n\t\t\tthis.addModAction(`The auction was ended by ${user.name}.`);\n\t\t\tthis.modlog('AUCTION END');\n\t\t},\n\t\tinfo: 'display',\n\t\tdisplay(target, room, user) {\n\t\t\tthis.runBroadcast();\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tthis.sendReplyBox(auction.generateAuctionTable());\n\t\t},\n\t\tpricelist(target, room, user) {\n\t\t\tthis.runBroadcast();\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tthis.sendReplyBox(auction.generatePriceList());\n\t\t},\n\t\tminbid(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction minbid');\n\t\t\tconst amount = parseCredits(target);\n\t\t\tauction.setMinBid(amount);\n\t\t\tthis.addModAction(`${user.name} set the minimum bid to ${amount}.`);\n\t\t\tthis.modlog('AUCTION MINBID', null, `${amount}`);\n\t\t},\n\t\tminbidhelp: [\n\t\t\t`/auction minbid [amount] - Sets the minimum bid. Requires: # & auction owner`,\n\t\t],\n\t\tminplayers(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction minplayers');\n\t\t\tconst amount = parseInt(target);\n\t\t\tauction.setMinPlayers(amount);\n\t\t\tthis.addModAction(`${user.name} set the minimum number of players to ${amount}.`);\n\t\t},\n\t\tminplayershelp: [\n\t\t\t`/auction minplayers [amount] - Sets the minimum number of players. Requires: # & auction owner`,\n\t\t],\n\t\tnomtimer(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction nomtimer');\n\t\t\tconst seconds = this.meansNo(target) ? 0 : parseInt(target);\n\t\t\tauction.setNomTimeLimit(seconds);\n\t\t\tthis.addModAction(`${user.name} set the nomination timer to ${seconds} seconds.`);\n\t\t},\n\t\tnomtimerhelp: [\n\t\t\t`/auction nomtimer [seconds/off] - Sets the nomination timer to [seconds] seconds or disables it. Requires: # & auction owner`,\n\t\t],\n\t\tbidtimer(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction settimer');\n\t\t\tconst seconds = parseInt(target);\n\t\t\tauction.setBidTimeLimit(seconds);\n\t\t\tthis.addModAction(`${user.name} set the bid timer to ${seconds} seconds.`);\n\t\t},\n\t\tbidtimerhelp: [\n\t\t\t`/auction timer [seconds] - Sets the bid timer to [seconds] seconds. Requires: # & auction owner`,\n\t\t],\n\t\tsettype(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction settype');\n\t\t\tauction.setType(target);\n\t\t\tthis.addModAction(`${user.name} set the auction type to ${toID(target)}.`);\n\t\t},\n\t\tsettypehelp: [\n\t\t\t`/auction settype [auction|blind|snake] - Sets the auction type. Requires: # & auction owner`,\n\t\t],\n\t\taddowner: 'addowners',\n\t\taddowners(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst owners = target.split(',').map(x => x.trim());\n\t\t\tif (!owners.length) return this.parse('/help auction addowners');\n\t\t\tauction.addOwners(owners);\n\t\t\tthis.addModAction(`${user.name} added ${Chat.toListString(owners.map(o => Users.getExact(o)!.name))} as auction owner${Chat.plural(owners.length)}.`);\n\t\t},\n\t\taddownershelp: [\n\t\t\t`/auction addowners [user1], [user2], ... - Adds users as auction owners. Requires: # & auction owner`,\n\t\t],\n\t\tremoveowner: 'removeowners',\n\t\tremoveowners(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst owners = target.split(',').map(x => x.trim());\n\t\t\tif (!owners.length) return this.parse('/help auction removeowners');\n\t\t\tauction.removeOwners(owners);\n\t\t\tthis.addModAction(`${user.name} removed ${Chat.toListString(owners.map(o => Users.getExact(o)?.name || o))} as auction owner${Chat.plural(owners.length)}.`);\n\t\t},\n\t\tremoveownershelp: [\n\t\t\t`/auction removeowners [user1], [user2], ... - Removes users as auction owners. Requires: # & auction owner`,\n\t\t],\n\t\tasync importplayers(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction importplayers');\n\t\t\tif (!/^https?:\\/\\/pastebin\\.com\\/[a-zA-Z0-9]+$/.test(target)) {\n\t\t\t\treturn this.errorReply('Invalid pastebin URL.');\n\t\t\t}\n\t\t\tlet data = '';\n\t\t\ttry {\n\t\t\t\tdata = await Net(`https://pastebin.com/raw/${target.split('/').pop()}`).get();\n\t\t\t} catch {}\n\t\t\tif (!data) return this.errorReply('Error fetching data from pastebin.');\n\n\t\t\tauction.importPlayers(data);\n\t\t\tthis.addModAction(`${user.name} imported the player list from ${target}.`);\n\t\t},\n\t\timportplayershelp: [\n\t\t\t`/auction importplayers [pastebin url] - Imports a list of players from a pastebin. Requires: # & auction owner`,\n\t\t\t`The pastebin should be a list of tab-separated values with the first row containing tier names and subsequent rows containing the player names and a Y in the column corresponding to the tier.`,\n\t\t\t`See https://pastebin.com/jPTbJBva for an example.`,\n\t\t],\n\t\taddplayer(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst [name, ...tiers] = target.split(',').map(x => x.trim());\n\t\t\tif (!name) return this.parse('/help auction addplayer');\n\t\t\tconst player = auction.addAuctionPlayer(name, tiers);\n\t\t\tthis.addModAction(`${user.name} added player ${player.name} to the auction.`);\n\t\t},\n\t\taddplayerhelp: [\n\t\t\t`/auction addplayer [name], [tier1], [tier2], ... - Adds a player to the auction. Requires: # & auction owner`,\n\t\t],\n\t\tremoveplayer(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction removeplayer');\n\t\t\tconst player = auction.removeAuctionPlayer(target);\n\t\t\tthis.addModAction(`${user.name} removed player ${player.name} from the auction.`);\n\t\t},\n\t\tremoveplayerhelp: [\n\t\t\t`/auction removeplayer [name] - Removes a player from the auction. Requires: # & auction owner`,\n\t\t],\n\t\tassignplayer(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst [player, team] = target.split(',').map(x => x.trim());\n\t\t\tif (!player) return this.parse('/help auction assignplayer');\n\t\t\tif (team) {\n\t\t\t\tauction.assignPlayer(player, team);\n\t\t\t\tthis.addModAction(`${user.name} assigned player ${player} to team ${team}.`);\n\t\t\t} else {\n\t\t\t\tauction.assignPlayer(player);\n\t\t\t\tthis.sendReply(`${user.name} returned player ${player} to the draft pool.`);\n\t\t\t}\n\t\t},\n\t\tassignplayerhelp: [\n\t\t\t`/auction assignplayer [player], [team] - Assigns a player to a team. If team is blank, returns player to draft pool. Requires: # & auction owner`,\n\t\t],\n\t\taddteam(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst [name, ...managerNames] = target.split(',').map(x => x.trim());\n\t\t\tif (!name) return this.parse('/help auction addteam');\n\t\t\tconst team = auction.addTeam(name);\n\t\t\tthis.addModAction(`${user.name} added team ${team.name} to the auction.`);\n\t\t\tauction.addManagers(team.name, managerNames);\n\t\t},\n\t\taddteamhelp: [\n\t\t\t`/auction addteam [name], [manager1], [manager2], ... - Adds a team to the auction. Requires: # & auction owner`,\n\t\t],\n\t\tremoveteam(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction removeteam');\n\t\t\tconst team = auction.removeTeam(target);\n\t\t\tthis.addModAction(`${user.name} removed team ${team.name} from the auction.`);\n\t\t},\n\t\tremoveteamhelp: [\n\t\t\t`/auction removeteam [team] - Removes a team from the auction. Requires: # & auction owner`,\n\t\t],\n\t\tsuspendteam(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction suspendteam');\n\t\t\tconst team = auction.suspendTeam(target);\n\t\t\tthis.addModAction(`${user.name} suspended team ${team.name}.`);\n\t\t},\n\t\tsuspendteamhelp: [\n\t\t\t`/auction suspendteam [team] - Suspends a team from the auction. Requires: # & auction owner`,\n\t\t\t`Suspended teams have their nomination turns skipped and are not allowed to place bids.`,\n\t\t],\n\t\tunsuspendteam(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction unsuspendteam');\n\t\t\tconst team = auction.unsuspendTeam(target);\n\t\t\tthis.addModAction(`${user.name} unsuspended team ${team.name}.`);\n\t\t},\n\t\tunsuspendteamhelp: [\n\t\t\t`/auction unsuspendteam [team] - Unsuspends a team from the auction. Requires: # & auction owner`,\n\t\t],\n\t\taddmanager: 'addmanagers',\n\t\taddmanagers(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst [teamName, ...managerNames] = target.split(',').map(x => x.trim());\n\t\t\tif (!teamName || !managerNames.length) return this.parse('/help auction addmanagers');\n\t\t\tconst team = auction.addManagers(teamName, managerNames);\n\t\t\tconst managers = managerNames.map(m => Users.getExact(m)?.name || toID(m));\n\t\t\tthis.addModAction(`${user.name} added ${Chat.toListString(managers)} as manager${Chat.plural(managers.length)} for team ${team.name}.`);\n\t\t},\n\t\taddmanagershelp: [\n\t\t\t`/auction addmanagers [team], [user1], [user2], ... - Adds users as managers to a team. Requires: # & auction owner`,\n\t\t],\n\t\tremovemanager: 'removemanagers',\n\t\tremovemanagers(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tif (!target) return this.parse('/help auction removemanagers');\n\t\t\tconst managerNames = target.split(',').map(x => x.trim());\n\t\t\tauction.removeManagers(managerNames);\n\t\t\tconst managers = managerNames.map(m => Users.getExact(m)?.name || toID(m));\n\t\t\tthis.addModAction(`${user.name} removed ${Chat.toListString(managers)} as manager${Chat.plural(managers.length)}.`);\n\t\t},\n\t\tremovemanagershelp: [\n\t\t\t`/auction removemanagers [user1], [user2], ... - Removes users as managers. Requires: # & auction owner`,\n\t\t],\n\t\taddcredits(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tconst [teamName, amount] = target.split(',').map(x => x.trim());\n\t\t\tif (!teamName || !amount) return this.parse('/help auction addcredits');\n\t\t\tconst credits = parseCredits(amount);\n\t\t\tconst team = auction.addCreditsToTeam(teamName, credits);\n\t\t\tthis.addModAction(`${user.name} ${credits < 0 ? 'removed' : 'added'} ${Math.abs(credits)} credits ${credits < 0 ? 'from' : 'to'} team ${team.name}.`);\n\t\t},\n\t\taddcreditshelp: [\n\t\t\t`/auction addcredits [team], [amount] - Adds credits to a team. Requires: # & auction owner`,\n\t\t],\n\t\tnom: 'nominate',\n\t\tnominate(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tif (!target) return this.parse('/help auction nominate');\n\t\t\tauction.nominate(user, target);\n\t\t},\n\t\tnominatehelp: [\n\t\t\t`/auction nominate OR /nom [player] - Nominates a player for auction.`,\n\t\t],\n\t\tbid(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tif (!target) return this.parse('/help auction bid');\n\t\t\tauction.bid(user, parseCredits(target));\n\t\t},\n\t\tbidhelp: [\n\t\t\t`/auction bid OR /bid [amount] - Bids on a player for the specified amount. If the amount is less than 500, it will be multiplied by 1000.`,\n\t\t\t`During the bidding phase, all numbers that are sent in the chat will be treated as bids.`,\n\t\t],\n\t\tskip: 'skipnom',\n\t\tskipnom(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tauction.skipNom();\n\t\t\tthis.addModAction(`${user.name} skipped the previous nomination.`);\n\t\t},\n\t\tundo(target, room, user) {\n\t\t\tconst auction = this.requireGame(Auction);\n\t\t\tauction.checkOwner(user);\n\n\t\t\tauction.undoLastNom();\n\t\t\tthis.addModAction(`${user.name} undid the last nomination.`);\n\t\t},\n\t\tdisable(target, room) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (room.settings.auctionDisabled) {\n\t\t\t\treturn this.errorReply('Auctions are already disabled.');\n\t\t\t}\n\t\t\troom.settings.auctionDisabled = true;\n\t\t\troom.saveSettings();\n\t\t\tthis.sendReply('Auctions have been disabled for this room.');\n\t\t},\n\t\tenable(target, room) {\n\t\t\troom = this.requireRoom();\n\t\t\tthis.checkCan('gamemanagement', null, room);\n\t\t\tif (!room.settings.auctionDisabled) {\n\t\t\t\treturn this.errorReply('Auctions are already enabled.');\n\t\t\t}\n\t\t\tdelete room.settings.auctionDisabled;\n\t\t\troom.saveSettings();\n\t\t\tthis.sendReply('Auctions have been enabled for this room.');\n\t\t},\n\t\tongoing: 'running',\n\t\trunning() {\n\t\t\tif (!this.runBroadcast()) return;\n\t\t\tconst runningAuctions = [...Rooms.rooms.values()].filter(r => r.getGame(Auction)).map(r => r.title);\n\t\t\tthis.sendReply(`Running auctions: ${runningAuctions.join(', ') || 'None'}`);\n\t\t},\n\t\t'': 'help',\n\t\thelp() {\n\t\t\tthis.parse('/help auction');\n\t\t},\n\t},\n\tauctionhelp() {\n\t\tif (!this.runBroadcast()) return;\n\t\tthis.sendReplyBox(\n\t\t\t`Auction commands<br/>` +\n\t\t\t`- create [startingcredits]: Creates an auction.<br/>` +\n\t\t\t`- start: Starts the auction.<br/>` +\n\t\t\t`- reset: Resets the auction.<br/>` +\n\t\t\t`- end: Ends the auction.<br/>` +\n\t\t\t`- running: Shows a list of rooms with running auctions.<br/>` +\n\t\t\t`- display: Displays the current state of the auction.<br/>` +\n\t\t\t`- pricelist: Displays the current prices of players by team.<br/>` +\n\t\t\t`- nom [player]: Nominates a player for auction.<br/>` +\n\t\t\t`- bid [amount]: Bids on a player for the specified amount. If the amount is less than 500, it will be multiplied by 1000.<br/>` +\n\t\t\t`You may use /bid and /nom directly without the /auction prefix.<br/>` +\n\t\t\t`During the bidding phase, all numbers that are sent in the chat will be treated as bids.<br/><br/>` +\n\t\t\t`<details class=\"readmore\"><summary>Configuration Commands</summary>` +\n\t\t\t`- minbid [amount]: Sets the minimum bid.<br/>` +\n\t\t\t`- minplayers [amount]: Sets the minimum number of players.<br/>` +\n\t\t\t`- nomtimer [seconds]: Sets the nomination timer to [seconds] seconds.<br/>` +\n\t\t\t`- bidtimer [seconds]: Sets the bid timer to [seconds] seconds.<br/>` +\n\t\t\t`- blindmode [on/off]: Enables or disables blind mode.<br/>` +\n\t\t\t`- addowners [user1], [user2], ...: Adds users as auction owners.<br/>` +\n\t\t\t`- removeowners [user1], [user2], ...: Removes users as auction owners.<br/>` +\n\t\t\t`- importplayers [pastebin url]: Imports a list of players from a pastebin.<br/>` +\n\t\t\t`- addplayer [name], [tier1], [tier2], ...: Adds a player to the auction.<br/>` +\n\t\t\t`- removeplayer [name]: Removes a player from the auction.<br/>` +\n\t\t\t`- assignplayer [player], [team]: Assigns a player to a team. If team is blank, returns player to draft pool.<br/>` +\n\t\t\t`- addteam [name], [manager1], [manager2], ...: Adds a team to the auction.<br/>` +\n\t\t\t`- removeteam [name]: Removes the given team from the auction.<br/>` +\n\t\t\t`- suspendteam [name]: Suspends the given team from the auction.<br/>` +\n\t\t\t`- unsuspendteam [name]: Unsuspends the given team from the auction.<br/>` +\n\t\t\t`- addmanagers [team], [user1], [user2], ...: Adds users as managers to a team.<br/>` +\n\t\t\t`- removemanagers [user1], [user2], ...: Removes users as managers..<br/>` +\n\t\t\t`- addcredits [team], [amount]: Adds credits to a team.<br/>` +\n\t\t\t`- skipnom: Skips the current nomination.<br/>` +\n\t\t\t`- undo: Undoes the last nomination.<br/>` +\n\t\t\t`- [enable/disable]: Enables or disables auctions from being started in a room.<br/>` +\n\t\t\t`</details>`\n\t\t);\n\t},\n\tnom(target) {\n\t\tthis.parse(`/auction nominate ${target}`);\n\t},\n\tbid(target) {\n\t\tthis.parse(`/auction bid ${target}`);\n\t},\n\toverpay() {\n\t\tthis.requireGame(Auction);\n\t\tthis.checkChat();\n\t\treturn '/announce OVERPAY!';\n\t},\n};\n\nexport const roomSettings: Chat.SettingsHandler = room => ({\n\tlabel: \"Auction\",\n\tpermission: 'editroom',\n\toptions: [\n\t\t[`disabled`, room.settings.auctionDisabled || 'auction disable'],\n\t\t[`enabled`, !room.settings.auctionDisabled || 'auction enable'],\n\t],\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,iBAAyB;AAezB,MAAM,KAAK;AAAA,EAOV,YAAY,MAAc,SAAkB;AAC3C,SAAK,KAAK,KAAK,IAAI;AACnB,SAAK,OAAO;AACZ,SAAK,UAAU,CAAC;AAChB,SAAK,UAAU,QAAQ;AACvB,SAAK,YAAY;AACjB,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,cAAc;AACb,WAAO,CAAC,GAAG,KAAK,QAAQ,SAAS,OAAO,CAAC,EACvC,OAAO,OAAK,EAAE,SAAS,IAAI,EAC3B,IAAI,OAAK,MAAM,SAAS,EAAE,EAAE,GAAG,QAAQ,EAAE,EAAE;AAAA,EAC9C;AAAA,EAEA,UAAU,QAAgB,QAAQ,GAAG;AACpC,WAAO,MAAM,aAAa,MAAM;AAChC,SAAK,QAAQ,KAAK,MAAM;AACxB,SAAK,WAAW;AAChB,WAAO,OAAO;AACd,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,aAAa,QAAgB;AAC5B,UAAM,SAAS,KAAK,QAAQ,QAAQ,MAAM;AAC1C,QAAI,WAAW;AAAI;AACnB,SAAK,QAAQ,OAAO,QAAQ,CAAC;AAC7B,WAAO,OAAO;AACd,WAAO,QAAQ;AAAA,EAChB;AAAA,EAEA,cAAc;AACb,WAAO,KAAK,cACX,KAAK,QAAQ,SAAS,UACrB,KAAK,QAAQ,UAAU,KAAK,QAAQ,aACpC,KAAK,UAAU,KAAK,QAAQ;AAAA,EAE/B;AAAA,EAEA,OAAO,UAAU,KAAK,SAAS;AAC9B,WAAO,UAAU,KAAK,QAAQ,SAAS,KAAK,IAAI,GAAG,KAAK,QAAQ,SAAS,KAAK,QAAQ,aAAa,CAAC;AAAA,EACrG;AACD;AAEA,SAAS,aAAa,QAAgB;AACrC,MAAI,UAAU,OAAO,OAAO,QAAQ,KAAK,GAAG,CAAC;AAC7C,MAAI,KAAK,IAAI,OAAO,IAAI;AAAK,eAAW;AACxC,MAAI,CAAC,WAAW,UAAU,QAAQ,GAAG;AACpC,UAAM,IAAI,KAAK,aAAa,kDAAkD;AAAA,EAC/E;AACA,SAAO;AACR;AAEO,MAAM,gBAAgB,MAAM,eAAe;AAAA,EA2BjD,YAAY,MAAY,kBAAkB,KAAQ;AACjD,UAAM,IAAI;AA3BX,SAAkB,SAAS;AAC3B,kBAAkB,oBAAI,IAAI;AAC1B,iBAA2B,oBAAI,IAAI;AACnC,oBAAiC,oBAAI,IAAI;AACzC,0BAAsC,oBAAI,IAAI;AAG9C,kBAAS;AACT,sBAAa;AACb,gBAAsC;AAEtC,qBAA2B;AAC3B,iBAAgB,CAAC;AACjB,oBAAyB;AACzB,wBAAe;AACf,4BAAmB;AACnB,oBAAyB;AACzB,wBAAe;AACf,4BAAmB;AACnB,0BAAuB;AACvB,2BAA0B;AAC1B,yBAAsB;AACtB,sBAAa;AAEb;AAAA,sBAAgC,oBAAI,IAAI;AACxC,iBAAiC;AAGhC,SAAK,QAAQ;AACb,SAAK,kBAAkB;AAAA,EACxB;AAAA,EAEA,YAAY,SAAiB;AAC5B,SAAK,KAAK,IAAI,QAAQ,SAAS,EAAE,OAAO;AAAA,EACzC;AAAA,EAEA,YAAY,aAAqB;AAChC,SAAK,KAAK,IAAI,8BAA8B,mBAAmB,EAAE,OAAO;AAAA,EACzE;AAAA,EAEA,WAAW,MAAY;AACtB,QAAI,CAAC,KAAK,OAAO,IAAI,KAAK,EAAE,KAAK,CAAC,MAAM,KAAK,cAAc,MAAM,WAAW,MAAM,KAAK,IAAI,GAAG;AAC7F,YAAM,IAAI,KAAK,aAAa,mDAAmD;AAAA,IAChF;AAAA,EACD;AAAA,EAEA,UAAU,OAAiB;AAC1B,eAAW,QAAQ,OAAO;AACzB,YAAM,OAAO,MAAM,SAAS,IAAI;AAChC,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,SAAS,kBAAkB;AAClE,UAAI,KAAK,OAAO,IAAI,KAAK,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,GAAG,KAAK,mCAAmC;AACrG,WAAK,OAAO,IAAI,KAAK,EAAE;AAAA,IACxB;AAAA,EACD;AAAA,EAEA,aAAa,OAAiB;AAC7B,eAAW,QAAQ,OAAO;AACzB,YAAM,KAAK,KAAK,IAAI;AACpB,UAAI,CAAC,KAAK,OAAO,IAAI,EAAE;AAAG,cAAM,IAAI,KAAK,aAAa,SAAS,gCAAgC;AAC/F,WAAK,OAAO,OAAO,EAAE;AAAA,IACtB;AAAA,EACD;AAAA,EAEA,qBAAqB,SAA8B,MAAM,QAAQ,QAAQ,YAAY,OAAO;AAC3F,QAAI,MAAM;AACV,WAAO,QAAQ,MAAM,GAAG,GAAG,EAAE,IAAI,OAAK;AACrC,UAAI,OAAO,MAAM,UAAU;AAC1B,eAAO,2BAA2B,EAAE,OAAO,SAAS,GAAG,iBAAM,WAAW,EAAE,MAAM,KAAK,IAAI,CAAC,MAAM,SAAS,YAAY,sBAAsB,MAAM,iBAAM,WAAW,EAAE,IAAI;AAAA,MACzK;AACA,aAAO,YAAY,YAAY,sBAAsB,MAAM,iBAAM,WAAW,CAAC;AAAA,IAC9E,CAAC,EAAE,KAAK,IAAI;AACZ,QAAI,QAAQ,SAAS,KAAK;AACzB,aAAO,iBAAiB,QAAQ,MAAM,GAAG,EAAE,IAAI,OAAK,iBAAM,WAAW,OAAO,MAAM,WAAW,EAAE,OAAO,CAAC,CAAC,EAAE,KAAK,IAAI,QAAQ,QAAQ,SAAS;AAAA,IAC7I;AACA,WAAO;AACP,WAAO;AAAA,EACR;AAAA,EAEA,oBAAoB;AACnB,UAAM,UAAU,iBAAM,OAAO,KAAK,kBAAkB,GAAG,OAAK,CAAC,EAAE,KAAK;AACpE,QAAI,MAAM;AACV,QAAI,eAAe;AAEnB,eAAW,QAAQ,KAAK,MAAM,OAAO,GAAG;AACvC,UAAIA,SAAQ;AACZ,iBAAW,UAAU,QAAQ,OAAO,OAAK,EAAE,SAAS,IAAI,GAAG;AAC1D,QAAAA,UAAS,iBAAM,eAAe,OAAO,gBAAgB,OAAO;AAAA,MAC7D;AACA,MAAAA,UAAS;AACT,aAAO,qBAAqB,iBAAM,WAAW,KAAK,IAAI,cAAcA;AACpE,sBAAgB,aAAa,KAAK,SAASA,OAAM,QAAQ,YAAY,MAAM;AAAA,IAC5E;AAEA,QAAI,QAAQ;AACZ,eAAW,UAAU,SAAS;AAC7B,eAAS,iBAAM,eAAe,OAAO,gBAAgB,OAAO;AAAA,IAC7D;AACA,aAAS;AACT,WAAO,kCAAkC;AACzC,oBAAgB,kBAAkB,MAAM,QAAQ,YAAY,MAAM;AAElE,WAAO,iBAAM,wBAAwB;AACrC,WAAO;AAAA,EACR;AAAA,EAEA,qBAAqB,QAAQ,OAAO;AACnC,UAAM,QAAQ,KAAK,MAAM,OAAO,UAAQ,CAAC,KAAK,YAAY,CAAC;AAC3D,QAAI,MAAM,0DAA0D,CAAC,QAAQ,6BAA6B;AAC1G,eAAW,QAAQ,KAAK,MAAM,OAAO,GAAG;AACvC,aAAO;AACP,UAAI,CAAC,OAAO;AACX,YAAI,KAAK,MAAM,QAAQ,IAAI,IAAI;AAC/B,YAAI,KAAK,MAAM,YAAY,IAAI,IAAI;AACnC,YAAI,KAAK,MAAM,SAAS,GAAG;AAC1B,WAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAAA,QACnB;AACA,eAAO,0CAA0C,MAAM,kDAAkD,MAAM;AAAA,MAChH;AACA,aAAO,2CAA2C,iBAAM,WAAW,KAAK,IAAI,kBAAkB,KAAK,qBAAqB,KAAK,YAAY,GAAG,GAAG,IAAI;AACnJ,aAAO,mCAAmC,KAAK,QAAQ,eAAe,IAAI,KAAK,OAAO,KAAK,KAAK,SAAS,8CAA8C,KAAK,OAAO,EAAE,eAAe,aAAa;AACjM,aAAO,mCAAmC,CAAC,QAAQ,uDAAuD,kCAAkC,KAAK,QAAQ,gBAAgB,KAAK,qBAAqB,KAAK,OAAO;AAC/M,aAAO;AAAA,IACR;AACA,WAAO;AAEP,UAAM,UAAU,iBAAM,OAAO,KAAK,oBAAoB,GAAG,OAAK,EAAE,IAAI;AACpE,UAAM,aAAa,oBAAI,IAAsB;AAC7C,eAAW,UAAU,SAAS;AAC7B,UAAI,CAAC,OAAO;AAAO;AACnB,iBAAW,QAAQ,OAAO,OAAO;AAChC,YAAI,CAAC,WAAW,IAAI,IAAI;AAAG,qBAAW,IAAI,MAAM,CAAC,CAAC;AAClD,mBAAW,IAAI,IAAI,EAAG,KAAK,MAAM;AAAA,MAClC;AAAA,IACD;AACA,UAAM,cAAc,CAAC,GAAG,WAAW,KAAK,CAAC,EAAE,KAAK;AAChD,QAAI,YAAY,QAAQ;AACvB,aAAO,wCAAwC,QAAQ;AACvD,aAAO,kCAAkC,KAAK,qBAAqB,OAAO;AAC1E,aAAO;AACP,iBAAW,QAAQ,aAAa;AAC/B,cAAM,cAAc,WAAW,IAAI,IAAI;AACvC,eAAO,yBAAyB,iBAAM,WAAW,IAAI,MAAM,YAAY,oBAAoB,KAAK,qBAAqB,WAAW;AAAA,MACjI;AACA,aAAO;AAAA,IACR,OAAO;AACN,aAAO,wCAAwC,QAAQ,oBAAoB,KAAK,qBAAqB,OAAO;AAAA,IAC7G;AACA,WAAO;AACP,WAAO,qBAAqB,KAAK,OAAO,eAAe;AACvD,WAAO,kCAAkC,KAAK;AAC9C,WAAO,mBAAmB,KAAK,eAAe,GAAG,KAAK,kBAAkB;AACxE,QAAI,KAAK,SAAS;AAAS,aAAO,mBAAmB,KAAK;AAC1D,WAAO,sBAAsB,KAAK;AAClC,WAAO;AACP,WAAO;AAAA,EACR;AAAA,EAEA,cAAc;AACb,QAAI,MAAM;AACV,WAAO,iBAAM,yBAAyB,KAAK,gBAAgB;AAC3D,WAAO,eAAe,KAAK;AAC3B,WAAO,iBAAM,sBAAsB,KAAK,cAAc;AACtD,WAAO,iBAAM,iBAAiB,KAAK,gBAAgB,OAAO,SAAS,GAAG,KAAK,gBAAgB,MAAM,KAAK,IAAI,MAAM;AAChH,WAAO;AACP,SAAK,KAAK,IAAI,cAAc,KAAK,gBAAgB,MAAM,KAAK,EAAE,OAAO;AAAA,EACtE;AAAA,EAEA,UAAU,SAAS,OAAO,MAAM,OAAO;AACtC,QAAI,MAAM;AACV,WAAO,yCAAyC,KAAK,kBAAkB,MAAM,KAAK,mBAAmB,KAAK,oBAAoB,KAAM,EAAC,QAAQ,KAAI,CAAC,EAAE,MAAM,CAAC;AAC3J,WAAO;AACP,SAAK,KAAK,IAAI,SAAS,SAAS,WAAW,YAAY,KAAK,EAAE,OAAO;AAAA,EACtE;AAAA,EAEA,UAAU,QAAgB;AACzB,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,kEAAkE;AAAA,IAC/F;AACA,QAAI,SAAS;AAAQ,YAAM,IAAI,KAAK,aAAa,0CAA0C;AAC3F,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,cAAc,QAAgB;AAC7B,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,gFAAgF;AAAA,IAC7G;AACA,QAAI,CAAC,UAAU,SAAS,IAAI;AAC3B,YAAM,IAAI,KAAK,aAAa,yDAAyD;AAAA,IACtF;AACA,SAAK,aAAa;AAAA,EACnB;AAAA,EAEA,gBAAgB,SAAiB;AAChC,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,4EAA4E;AAAA,IACzG;AACA,QAAI,MAAM,OAAO,KAAM,YAAY,UAAU,KAAK,UAAU,MAAO;AAClE,YAAM,IAAI,KAAK,aAAa,8DAA8D;AAAA,IAC3F;AACA,SAAK,eAAe,KAAK,mBAAmB;AAAA,EAC7C;AAAA,EAEA,gBAAgB,SAAiB;AAChC,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,qEAAqE;AAAA,IAClG;AACA,QAAI,CAAC,WAAW,UAAU,KAAK,UAAU,KAAK;AAC7C,YAAM,IAAI,KAAK,aAAa,uDAAuD;AAAA,IACpF;AACA,SAAK,eAAe,KAAK,mBAAmB;AAAA,EAC7C;AAAA,EAEA,QAAQ,aAAqB;AAC5B,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,mEAAmE;AAAA,IAChG;AACA,QAAI,CAAC,CAAC,WAAW,SAAS,OAAO,EAAE,SAAS,KAAK,WAAW,CAAC,GAAG;AAC/D,YAAM,IAAI,KAAK,aAAa,yBAAyB,gEAAgE;AAAA,IACtH;AACA,SAAK,OAAO,KAAK,WAAW;AAC5B,SAAK,eAAe,KAAK,mBAAmB,KAAK,SAAS,UAAU,KAAK;AACzE,SAAK,eAAe,KAAK,mBAAmB,KAAK,SAAS,UAAU,KAAK;AAAA,EAC1E;AAAA,EAEA,sBAAsB;AACrB,WAAO,CAAC,GAAG,KAAK,eAAe,OAAO,CAAC,EAAE,OAAO,OAAK,CAAC,EAAE,IAAI;AAAA,EAC7D;AAAA,EAEA,oBAAoB;AACnB,WAAO,CAAC,GAAG,KAAK,eAAe,OAAO,CAAC,EAAE,OAAO,OAAK,EAAE,IAAI;AAAA,EAC5D;AAAA,EAEA,cAAc,MAAc;AAC3B,QAAI,KAAK,UAAU,SAAS;AAC3B,YAAM,IAAI,KAAK,aAAa,gEAAgE;AAAA,IAC7F;AACA,UAAM,OAAO,KAAK,QAAQ,MAAM,EAAE,EAAE,MAAM,IAAI;AAC9C,UAAM,YAAY,KAAK,MAAM,EAAG,MAAM,GAAI,EAAE,MAAM,CAAC;AACnD,UAAM,aAAa,oBAAI,IAAoB;AAC3C,eAAW,OAAO,MAAM;AACvB,YAAM,QAAQ,CAAC;AACf,YAAM,CAAC,MAAM,GAAG,QAAQ,IAAI,IAAI,MAAM,GAAI;AAC1C,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACzC,YAAI,CAAC,KAAK,KAAK,UAAU,QAAQ,EAAE,SAAS,SAAS,CAAC,EAAE,KAAK,CAAC,GAAG;AAChE,cAAI,CAAC,UAAU,CAAC;AAAG,kBAAM,IAAI,KAAK,aAAa,0CAA0C;AACzF,cAAI,UAAU,CAAC,EAAE,SAAS;AAAI,kBAAM,IAAI,KAAK,aAAa,2CAA2C;AACrG,gBAAM,KAAK,UAAU,CAAC,CAAC;AAAA,QACxB;AAAA,MACD;AACA,UAAI,KAAK,SAAS;AAAI,cAAM,IAAI,KAAK,aAAa,6CAA6C;AAC/F,YAAM,SAAiB;AAAA,QACtB,IAAI,KAAK,IAAI;AAAA,QACb;AAAA,QACA,OAAO;AAAA,MACR;AACA,UAAI,MAAM;AAAQ,eAAO,QAAQ;AACjC,iBAAW,IAAI,OAAO,IAAI,MAAM;AAAA,IACjC;AACA,SAAK,iBAAiB;AAAA,EACvB;AAAA,EAEA,iBAAiB,MAAc,OAAkB;AAChD,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,8CAA8C;AACpG,QAAI,KAAK,SAAS;AAAI,YAAM,IAAI,KAAK,aAAa,6CAA6C;AAC/F,UAAM,SAAiB;AAAA,MACtB,IAAI,KAAK,IAAI;AAAA,MACb;AAAA,MACA,OAAO;AAAA,IACR;AACA,QAAI,OAAO,QAAQ;AAClB,UAAI,MAAM,KAAK,UAAQ,KAAK,SAAS,EAAE,GAAG;AACzC,cAAM,IAAI,KAAK,aAAa,2CAA2C;AAAA,MACxE;AACA,aAAO,QAAQ;AAAA,IAChB;AACA,SAAK,eAAe,IAAI,OAAO,IAAI,MAAM;AACzC,WAAO;AAAA,EACR;AAAA,EAEA,oBAAoB,MAAc;AACjC,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,gDAAgD;AACtG,UAAM,SAAS,KAAK,eAAe,IAAI,KAAK,IAAI,CAAC;AACjD,QAAI,CAAC;AAAQ,YAAM,IAAI,KAAK,aAAa,WAAW,kBAAkB;AACtE,WAAO,MAAM,aAAa,MAAM;AAChC,SAAK,eAAe,OAAO,OAAO,EAAE;AACpC,QAAI,KAAK,UAAU,WAAW,CAAC,KAAK,oBAAoB,EAAE,QAAQ;AACjE,WAAK,IAAI,iFAAiF;AAAA,IAC3F;AACA,WAAO;AAAA,EACR;AAAA,EAEA,aAAa,MAAc,UAAmB;AAC7C,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,iDAAiD;AACvG,UAAM,SAAS,KAAK,eAAe,IAAI,KAAK,IAAI,CAAC;AACjD,QAAI,CAAC;AAAQ,YAAM,IAAI,KAAK,aAAa,WAAW,kBAAkB;AACtE,QAAI,UAAU;AACb,YAAM,OAAO,KAAK,MAAM,IAAI,KAAK,QAAQ,CAAC;AAC1C,UAAI,CAAC;AAAM,cAAM,IAAI,KAAK,aAAa,SAAS,sBAAsB;AACtE,WAAK,UAAU,MAAM;AACrB,UAAI,CAAC,KAAK,oBAAoB,EAAE,QAAQ;AACvC,eAAO,KAAK,IAAI,iFAAiF;AAAA,MAClG;AAAA,IACD,OAAO;AACN,aAAO,MAAM,aAAa,MAAM;AAAA,IACjC;AAAA,EACD;AAAA,EAEA,QAAQ,MAAc;AACrB,QAAI,KAAK,UAAU;AAAS,YAAM,IAAI,KAAK,aAAa,sDAAsD;AAC9G,QAAI,KAAK,SAAS;AAAI,YAAM,IAAI,KAAK,aAAa,2CAA2C;AAC7F,UAAM,OAAO,IAAI,KAAK,MAAM,IAAI;AAChC,SAAK,MAAM,IAAI,KAAK,IAAI,IAAI;AAC5B,UAAM,QAAQ,CAAC,GAAG,KAAK,MAAM,OAAO,CAAC;AACrC,SAAK,QAAQ,MAAM,OAAO,MAAM,MAAM,EAAE,QAAQ,CAAC;AACjD,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,MAAc;AACxB,QAAI,KAAK,UAAU;AAAS,YAAM,IAAI,KAAK,aAAa,wDAAwD;AAChH,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,IAAI,CAAC;AACtC,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,SAAS,kBAAkB;AAClE,SAAK,QAAQ,KAAK,MAAM,OAAO,OAAK,MAAM,IAAI;AAC9C,SAAK,MAAM,OAAO,KAAK,EAAE;AACzB,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,MAAc;AACzB,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,gDAAgD;AACtG,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,IAAI,CAAC;AACtC,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,SAAS,kBAAkB;AAClE,QAAI,KAAK;AAAW,YAAM,IAAI,KAAK,aAAa,QAAQ,4BAA4B;AACpF,QAAI,KAAK,mBAAmB;AAAM,YAAM,IAAI,KAAK,aAAa,0CAA0C;AACxG,SAAK,YAAY;AACjB,WAAO;AAAA,EACR;AAAA,EAEA,cAAc,MAAc;AAC3B,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,kDAAkD;AACxG,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,IAAI,CAAC;AACtC,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,SAAS,kBAAkB;AAClE,QAAI,CAAC,KAAK;AAAW,YAAM,IAAI,KAAK,aAAa,QAAQ,wBAAwB;AACjF,SAAK,YAAY;AACjB,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,UAAkB,OAAiB;AAC9C,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,QAAQ,CAAC;AAC1C,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,SAAS,sBAAsB;AACtE,UAAM,eAAe,MAAM,OAAO,UAAQ,CAAC,KAAK,IAAI,KAAK,KAAK,IAAI,EAAE,SAAS,EAAE;AAC/E,QAAI,aAAa,QAAQ;AACxB,YAAM,IAAI,KAAK,aAAa,sBAAsB,aAAa,KAAK,IAAI,GAAG;AAAA,IAC5E;AACA,eAAW,MAAM,MAAM,IAAI,IAAI,GAAG;AACjC,YAAM,UAAU,KAAK,SAAS,IAAI,EAAE;AACpC,UAAI,CAAC,SAAS;AACb,aAAK,SAAS,IAAI,IAAI,EAAC,IAAI,KAAI,CAAC;AAAA,MACjC,OAAO;AACN,gBAAQ,OAAO;AAAA,MAChB;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAAA,EAEA,eAAe,OAAiB;AAC/B,UAAM,eAAe,MAAM,OAAO,UAAQ,CAAC,KAAK,SAAS,IAAI,KAAK,IAAI,CAAC,CAAC;AACxE,QAAI,aAAa,QAAQ;AACxB,YAAM,IAAI,KAAK,aAAa,qBAAqB,aAAa,KAAK,IAAI,GAAG;AAAA,IAC3E;AACA,eAAW,MAAM,MAAM,IAAI,IAAI,GAAG;AACjC,WAAK,SAAS,OAAO,EAAE;AAAA,IACxB;AAAA,EACD;AAAA,EAEA,iBAAiB,UAAkB,QAAgB;AAClD,QAAI,KAAK,SAAS;AAAS,YAAM,IAAI,KAAK,aAAa,uCAAuC;AAC9F,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,gDAAgD;AACtG,UAAM,OAAO,KAAK,MAAM,IAAI,KAAK,QAAQ,CAAC;AAC1C,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,SAAS,sBAAsB;AACtE,UAAM,aAAa,KAAK,UAAU;AAClC,QAAI,cAAc,KAAK,aAAa,KAAU;AAC7C,YAAM,IAAI,KAAK,aAAa,oDAAoD;AAAA,IACjF;AACA,QAAI,KAAK,OAAO,UAAU,IAAI,KAAK,QAAQ;AAC1C,YAAM,IAAI,KAAK,aAAa,yEAAyE;AAAA,IACtG;AACA,SAAK,UAAU;AACf,WAAO;AAAA,EACR;AAAA,EAEA,QAAQ;AACP,QAAI,KAAK,UAAU;AAAS,YAAM,IAAI,KAAK,aAAa,kCAAkC;AAC1F,QAAI,KAAK,MAAM,OAAO;AAAG,YAAM,IAAI,KAAK,aAAa,8CAA8C;AACnG,UAAM,eAAe,CAAC,GAAG,KAAK,MAAM,OAAO,CAAC,EAAE,OAAO,OAAK,EAAE,OAAO,IAAI,KAAK,MAAM,EAAE,IAAI,OAAK,EAAE,IAAI;AACnG,QAAI,aAAa,QAAQ;AACxB,YAAM,IAAI,KAAK,aAAa,0FAA0F,aAAa,KAAK,IAAI,GAAG;AAAA,IAChJ;AACA,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,QAAQ;AACP,UAAM,QAAQ,CAAC,GAAG,KAAK,MAAM,OAAO,CAAC;AACrC,eAAW,QAAQ,OAAO;AACzB,WAAK,UAAU,KAAK;AACpB,WAAK,YAAY;AACjB,iBAAW,UAAU,KAAK,SAAS;AAClC,eAAO,OAAO;AACd,eAAO,QAAQ;AAAA,MAChB;AACA,WAAK,UAAU,CAAC;AAAA,IACjB;AACA,SAAK,YAAY;AACjB,SAAK,QAAQ,MAAM,OAAO,MAAM,MAAM,EAAE,QAAQ,CAAC;AACjD,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,YAAY,KAAK,qBAAqB,CAAC;AAAA,EAC7C;AAAA,EAEA,OAAO;AACN,SAAK,QAAQ;AACb,QAAI,CAAC,KAAK,MAAM,OAAO,UAAQ,CAAC,KAAK,YAAY,CAAC,EAAE,QAAQ;AAC3D,aAAO,KAAK,IAAI,oFAAoF;AAAA,IACrG;AACA,QAAI,CAAC,KAAK,oBAAoB,EAAE,QAAQ;AACvC,aAAO,KAAK,IAAI,iFAAiF;AAAA,IAClG;AACA,OAAG;AACF,WAAK,iBAAiB,KAAK,MAAM,MAAM;AACvC,WAAK,MAAM,KAAK,KAAK,cAAc;AAAA,IACpC,SAAS,KAAK,eAAe,YAAY;AACzC,SAAK,YAAY,KAAK,qBAAqB,CAAC;AAC5C,SAAK,YAAY,sBAAsB,iBAAM,WAAW,KAAK,eAAe,IAAI,gDAAgD,KAAK,eAAe,YAAY,EAAE,IAAI,OAAK,8BAA8B,iBAAM,WAAW,CAAC,cAAc,EAAE,KAAK,GAAG,GAAG;AACtP,QAAI,KAAK,cAAc;AACtB,WAAK,UAAU,OAAO,IAAI;AAC1B,WAAK,WAAW,YAAY,MAAM,KAAK,aAAa,GAAG,GAAI;AAAA,IAC5D;AAAA,EACD;AAAA,EAEA,SAAS,MAAY,QAAgB;AACpC,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,wCAAwC;AAC9F,UAAM,UAAU,KAAK,SAAS,IAAI,KAAK,EAAE;AACzC,QAAI,CAAC,WAAW,QAAQ,SAAS,KAAK;AAAgB,WAAK,WAAW,IAAI;AAG1E,SAAK,YAAY,KAAK,MAAM,MAAM;AAClC,SAAK,UAAU,QAAQ,KAAK,UAAU,IAAI,CAAE;AAE5C,UAAM,SAAS,KAAK,eAAe,IAAI,KAAK,MAAM,CAAC;AACnD,QAAI,CAAC;AAAQ,YAAM,IAAI,KAAK,aAAa,GAAG,+BAA+B;AAC3E,QAAI,OAAO;AAAM,YAAM,IAAI,KAAK,aAAa,GAAG,OAAO,gCAAgC;AACvF,SAAK,cAAc;AACnB,SAAK,kBAAkB;AACvB,QAAI,KAAK,SAAS,SAAS;AAC1B,WAAK,YAAY,iBAAM,gBAAgB,KAAK,eAAe,8BAA8B,KAAK,gBAAgB,kBAAkB;AAChI,WAAK,eAAe,UAAU,KAAK,eAAe;AAClD,WAAK,KAAK;AAAA,IACX,OAAO;AACN,WAAK,QAAQ;AACb,WAAK,aAAa,KAAK;AACvB,WAAK,gBAAgB,KAAK;AAC1B,WAAK,KAAK,IAAI,iBAAM,eAAe,KAAK,KAAK,iBAAiB,OAAO,0BAA0B;AAC/F,WAAK,YAAY,iBAAM,wCAAwC,KAAK,gCAAgC,KAAK,eAAe,oCAAoC,OAAO,wEAAwE;AAC3O,UAAI,KAAK,SAAS;AAAW,aAAK,YAAY;AAC9C,WAAK,UAAU;AACf,WAAK,WAAW,YAAY,MAAM,KAAK,aAAa,GAAG,GAAI;AAAA,IAC5D;AAAA,EACD;AAAA,EAEA,IAAI,MAAY,KAAa;AAC5B,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,gDAAgD;AACtG,UAAM,OAAO,KAAK,SAAS,IAAI,KAAK,EAAE,GAAG;AACzC,QAAI,CAAC;AAAM,YAAM,IAAI,KAAK,aAAa,mCAAmC;AAC1E,QAAI,KAAK,YAAY;AAAG,YAAM,IAAI,KAAK,aAAa,+CAA+C;AAEnG,QAAI,MAAM,KAAK,OAAO;AAAG,YAAM,IAAI,KAAK,aAAa,2CAA2C;AAEhG,QAAI,KAAK,SAAS,SAAS;AAC1B,UAAI,KAAK,WAAW,IAAI,IAAI;AAAG,cAAM,IAAI,KAAK,aAAa,qCAAqC;AAChG,UAAI,OAAO,KAAK;AAAQ,cAAM,IAAI,KAAK,aAAa,+CAA+C;AACnG,iBAAW,WAAW,KAAK,SAAS,OAAO,GAAG;AAC7C,YAAI,QAAQ,SAAS;AAAM;AAC3B,cAAM,MAAM,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,GAAI,0CAA0C,wBAAwB,iBAAM,WAAW,KAAK,gBAAgB,IAAI;AAC3J,cAAM,SAAS,QAAQ,EAAE,GAAG,OAAO,KAAK,MAAM,GAAG;AAAA,MAClD;AACA,UAAI,MAAM,KAAK,YAAY;AAC1B,aAAK,aAAa;AAClB,aAAK,gBAAgB;AAAA,MACtB;AACA,WAAK,WAAW,IAAI,MAAM,GAAG;AAC7B,UAAI,KAAK,WAAW,SAAS,KAAK,MAAM,MAAM;AAC7C,aAAK,iBAAiB;AAAA,MACvB;AAAA,IACD,OAAO;AACN,UAAI,OAAO,KAAK;AAAY,cAAM,IAAI,KAAK,aAAa,+CAA+C;AACvG,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,WAAK,YAAY,iBAAM,wCAAwC,KAAK,mBAAmB,KAAK,aAAa,SAAS;AAClH,WAAK,cAAc;AACnB,WAAK,WAAW,YAAY,MAAM,KAAK,aAAa,GAAG,GAAI;AAC3D,WAAK,YAAY;AACjB,WAAK,UAAU;AAAA,IAChB;AAAA,EACD;AAAA,EAEA,cAAc,SAAiB,MAAY;AAC1C,QAAI,KAAK,UAAU,SAAS,CAAC,OAAO,QAAQ,QAAQ,KAAK,GAAG,CAAC;AAAG;AAChE,SAAK,IAAI,MAAM,aAAa,OAAO,CAAC;AACpC,WAAO;AAAA,EACR;AAAA,EAEA,UAAU;AACT,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,0CAA0C;AAChG,SAAK,kBAAkB;AACvB,SAAK,YAAY,KAAK,KAAK,eAAe,4CAA4C;AACtF,SAAK,cAAc;AACnB,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,mBAAmB;AAClB,QAAI,KAAK,SAAS,SAAS;AAC1B,UAAI,MAAM;AACV,UAAI,CAAC,KAAK,WAAW,IAAI,KAAK,cAAc,GAAG;AAC9C,eAAO,iBAAM,eAAe,KAAK,eAAe,gBAAgB,KAAK;AAAA,MACtE;AACA,iBAAW,CAAC,MAAM,GAAG,KAAK,KAAK,YAAY;AAC1C,eAAO,iBAAM,eAAe,KAAK,gBAAgB;AAAA,MAClD;AACA,aAAO;AACP,WAAK,YAAY,GAAG;AACpB,WAAK,WAAW,MAAM;AAAA,IACvB;AACA,SAAK,YAAY,iBAAM,gBAAgB,KAAK,cAAc,6BAA6B,KAAK,gBAAgB,0BAA0B,KAAK,yBAAyB;AACpK,SAAK,cAAc,UAAU,KAAK,iBAAiB,KAAK,UAAU;AAClE,SAAK,cAAc;AACnB,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,cAAc;AACb,QAAI,KAAK,UAAU;AAAO,YAAM,IAAI,KAAK,aAAa,yCAAyC;AAC/F,QAAI,CAAC,KAAK;AAAW,YAAM,IAAI,KAAK,aAAa,8CAA8C;AAC/F,SAAK,QAAQ,KAAK;AAClB,SAAK,YAAY;AACjB,QAAI,KAAK,iBAAiB;AACzB,WAAK,cAAc,aAAa,KAAK,eAAe;AACpD,WAAK,cAAc,WAAW,KAAK;AAAA,IACpC;AACA,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,gBAAgB;AACf,kBAAc,KAAK,QAAQ;AAC3B,SAAK,mBAAmB,KAAK;AAC7B,SAAK,KAAK,IAAI,qBAAqB;AAAA,EACpC;AAAA,EAEA,gBAAgB;AACf,kBAAc,KAAK,QAAQ;AAC3B,SAAK,mBAAmB,KAAK;AAC7B,SAAK,KAAK,IAAI,qBAAqB;AAAA,EACpC;AAAA,EAEA,eAAe;AACd,SAAK;AACL,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,QAAQ;AAAA,IACd,OAAO;AACN,WAAK,UAAU,MAAM,IAAI;AACzB,UAAI,KAAK,mBAAmB,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE,SAAS,KAAK,gBAAgB,GAAG;AACpF,aAAK,YAAY,qCAAqC,KAAK,uCAAuC;AAAA,MACnG;AAAA,IACD;AAAA,EACD;AAAA,EAEA,eAAe;AACd,SAAK;AACL,QAAI,CAAC,KAAK,kBAAkB;AAC3B,WAAK,iBAAiB;AAAA,IACvB,OAAO;AACN,WAAK,UAAU,IAAI;AACnB,UAAI,KAAK,mBAAmB,OAAO,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE,SAAS,KAAK,gBAAgB,GAAG;AACpF,aAAK,YAAY,qCAAqC,KAAK,uCAAuC;AAAA,MACnG;AAAA,IACD;AAAA,EACD;AAAA,EAEA,IAAI,SAAkB;AACrB,SAAK,YAAY,KAAK,qBAAqB,IAAI,CAAC;AAChD,SAAK,YAAY,KAAK,kBAAkB,CAAC;AACzC,QAAI;AAAS,WAAK,YAAY,OAAO;AACrC,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,UAAU;AACT,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,UAAM,QAAQ;AAAA,EACf;AACD;AAEO,MAAM,WAA8B;AAAA,EAC1C,SAAS;AAAA,IACR,OAAO,QAAQ,MAAM,MAAM;AAC1B,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,YAAY,MAAM,IAAI;AACpC,UAAI,KAAK;AAAM,eAAO,KAAK,WAAW,8BAA8B,KAAK,KAAK,iCAAiC;AAC/G,UAAI,KAAK,SAAS;AAAiB,eAAO,KAAK,WAAW,+CAA+C;AAEzG,UAAI;AACJ,UAAI,QAAQ;AACX,0BAAkB,aAAa,MAAM;AACrC,YAAI,kBAAkB,OAAS,kBAAkB,KAAU;AAC1D,iBAAO,KAAK,WAAW,yDAAyD;AAAA,QACjF;AAAA,MACD;AACA,YAAM,UAAU,IAAI,QAAQ,MAAM,eAAe;AACjD,cAAQ,UAAU,CAAC,KAAK,EAAE,CAAC;AAC3B,WAAK,OAAO;AACZ,WAAK,aAAa,6BAA6B,KAAK,OAAO;AAC3D,WAAK,OAAO,gBAAgB;AAAA,IAC7B;AAAA,IACA,YAAY;AAAA,MACX;AAAA,IACD;AAAA,IACA,MAAM,QAAQ,MAAM,MAAM;AACzB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,cAAQ,MAAM;AACd,WAAK,aAAa,8BAA8B,KAAK,OAAO;AAC5D,WAAK,OAAO,eAAe;AAAA,IAC5B;AAAA,IACA,MAAM,QAAQ,MAAM,MAAM;AACzB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,cAAQ,MAAM;AACd,WAAK,aAAa,4BAA4B,KAAK,OAAO;AAC1D,WAAK,OAAO,eAAe;AAAA,IAC5B;AAAA,IACA,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,IAAI,QAAQ,MAAM,MAAM;AACvB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,cAAQ,IAAI;AACZ,WAAK,aAAa,4BAA4B,KAAK,OAAO;AAC1D,WAAK,OAAO,aAAa;AAAA,IAC1B;AAAA,IACA,MAAM;AAAA,IACN,QAAQ,QAAQ,MAAM,MAAM;AAC3B,WAAK,aAAa;AAClB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,WAAK,aAAa,QAAQ,qBAAqB,CAAC;AAAA,IACjD;AAAA,IACA,UAAU,QAAQ,MAAM,MAAM;AAC7B,WAAK,aAAa;AAClB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,WAAK,aAAa,QAAQ,kBAAkB,CAAC;AAAA,IAC9C;AAAA,IACA,OAAO,QAAQ,MAAM,MAAM;AAC1B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,sBAAsB;AACrD,YAAM,SAAS,aAAa,MAAM;AAClC,cAAQ,UAAU,MAAM;AACxB,WAAK,aAAa,GAAG,KAAK,+BAA+B,SAAS;AAClE,WAAK,OAAO,kBAAkB,MAAM,GAAG,QAAQ;AAAA,IAChD;AAAA,IACA,YAAY;AAAA,MACX;AAAA,IACD;AAAA,IACA,WAAW,QAAQ,MAAM,MAAM;AAC9B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,0BAA0B;AACzD,YAAM,SAAS,SAAS,MAAM;AAC9B,cAAQ,cAAc,MAAM;AAC5B,WAAK,aAAa,GAAG,KAAK,6CAA6C,SAAS;AAAA,IACjF;AAAA,IACA,gBAAgB;AAAA,MACf;AAAA,IACD;AAAA,IACA,SAAS,QAAQ,MAAM,MAAM;AAC5B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,wBAAwB;AACvD,YAAM,UAAU,KAAK,QAAQ,MAAM,IAAI,IAAI,SAAS,MAAM;AAC1D,cAAQ,gBAAgB,OAAO;AAC/B,WAAK,aAAa,GAAG,KAAK,oCAAoC,kBAAkB;AAAA,IACjF;AAAA,IACA,cAAc;AAAA,MACb;AAAA,IACD;AAAA,IACA,SAAS,QAAQ,MAAM,MAAM;AAC5B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,wBAAwB;AACvD,YAAM,UAAU,SAAS,MAAM;AAC/B,cAAQ,gBAAgB,OAAO;AAC/B,WAAK,aAAa,GAAG,KAAK,6BAA6B,kBAAkB;AAAA,IAC1E;AAAA,IACA,cAAc;AAAA,MACb;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,MAAM,MAAM;AAC3B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,uBAAuB;AACtD,cAAQ,QAAQ,MAAM;AACtB,WAAK,aAAa,GAAG,KAAK,gCAAgC,KAAK,MAAM,IAAI;AAAA,IAC1E;AAAA,IACA,aAAa;AAAA,MACZ;AAAA,IACD;AAAA,IACA,UAAU;AAAA,IACV,UAAU,QAAQ,MAAM,MAAM;AAC7B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,SAAS,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAClD,UAAI,CAAC,OAAO;AAAQ,eAAO,KAAK,MAAM,yBAAyB;AAC/D,cAAQ,UAAU,MAAM;AACxB,WAAK,aAAa,GAAG,KAAK,cAAc,KAAK,aAAa,OAAO,IAAI,OAAK,MAAM,SAAS,CAAC,EAAG,IAAI,CAAC,qBAAqB,KAAK,OAAO,OAAO,MAAM,IAAI;AAAA,IACrJ;AAAA,IACA,eAAe;AAAA,MACd;AAAA,IACD;AAAA,IACA,aAAa;AAAA,IACb,aAAa,QAAQ,MAAM,MAAM;AAChC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,SAAS,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAClD,UAAI,CAAC,OAAO;AAAQ,eAAO,KAAK,MAAM,4BAA4B;AAClE,cAAQ,aAAa,MAAM;AAC3B,WAAK,aAAa,GAAG,KAAK,gBAAgB,KAAK,aAAa,OAAO,IAAI,OAAK,MAAM,SAAS,CAAC,GAAG,QAAQ,CAAC,CAAC,qBAAqB,KAAK,OAAO,OAAO,MAAM,IAAI;AAAA,IAC5J;AAAA,IACA,kBAAkB;AAAA,MACjB;AAAA,IACD;AAAA,IACA,MAAM,cAAc,QAAQ,MAAM,MAAM;AACvC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,6BAA6B;AAC5D,UAAI,CAAC,2CAA2C,KAAK,MAAM,GAAG;AAC7D,eAAO,KAAK,WAAW,uBAAuB;AAAA,MAC/C;AACA,UAAI,OAAO;AACX,UAAI;AACH,eAAO,UAAM,gBAAI,4BAA4B,OAAO,MAAM,GAAG,EAAE,IAAI,GAAG,EAAE,IAAI;AAAA,MAC7E,QAAE;AAAA,MAAO;AACT,UAAI,CAAC;AAAM,eAAO,KAAK,WAAW,oCAAoC;AAEtE,cAAQ,cAAc,IAAI;AAC1B,WAAK,aAAa,GAAG,KAAK,sCAAsC,SAAS;AAAA,IAC1E;AAAA,IACA,mBAAmB;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,IACA,UAAU,QAAQ,MAAM,MAAM;AAC7B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,CAAC,MAAM,GAAG,KAAK,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAC5D,UAAI,CAAC;AAAM,eAAO,KAAK,MAAM,yBAAyB;AACtD,YAAM,SAAS,QAAQ,iBAAiB,MAAM,KAAK;AACnD,WAAK,aAAa,GAAG,KAAK,qBAAqB,OAAO,sBAAsB;AAAA,IAC7E;AAAA,IACA,eAAe;AAAA,MACd;AAAA,IACD;AAAA,IACA,aAAa,QAAQ,MAAM,MAAM;AAChC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,4BAA4B;AAC3D,YAAM,SAAS,QAAQ,oBAAoB,MAAM;AACjD,WAAK,aAAa,GAAG,KAAK,uBAAuB,OAAO,wBAAwB;AAAA,IACjF;AAAA,IACA,kBAAkB;AAAA,MACjB;AAAA,IACD;AAAA,IACA,aAAa,QAAQ,MAAM,MAAM;AAChC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,CAAC,QAAQ,IAAI,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAC1D,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,4BAA4B;AAC3D,UAAI,MAAM;AACT,gBAAQ,aAAa,QAAQ,IAAI;AACjC,aAAK,aAAa,GAAG,KAAK,wBAAwB,kBAAkB,OAAO;AAAA,MAC5E,OAAO;AACN,gBAAQ,aAAa,MAAM;AAC3B,aAAK,UAAU,GAAG,KAAK,wBAAwB,2BAA2B;AAAA,MAC3E;AAAA,IACD;AAAA,IACA,kBAAkB;AAAA,MACjB;AAAA,IACD;AAAA,IACA,QAAQ,QAAQ,MAAM,MAAM;AAC3B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,CAAC,MAAM,GAAG,YAAY,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACnE,UAAI,CAAC;AAAM,eAAO,KAAK,MAAM,uBAAuB;AACpD,YAAM,OAAO,QAAQ,QAAQ,IAAI;AACjC,WAAK,aAAa,GAAG,KAAK,mBAAmB,KAAK,sBAAsB;AACxE,cAAQ,YAAY,KAAK,MAAM,YAAY;AAAA,IAC5C;AAAA,IACA,aAAa;AAAA,MACZ;AAAA,IACD;AAAA,IACA,WAAW,QAAQ,MAAM,MAAM;AAC9B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,0BAA0B;AACzD,YAAM,OAAO,QAAQ,WAAW,MAAM;AACtC,WAAK,aAAa,GAAG,KAAK,qBAAqB,KAAK,wBAAwB;AAAA,IAC7E;AAAA,IACA,gBAAgB;AAAA,MACf;AAAA,IACD;AAAA,IACA,YAAY,QAAQ,MAAM,MAAM;AAC/B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,2BAA2B;AAC1D,YAAM,OAAO,QAAQ,YAAY,MAAM;AACvC,WAAK,aAAa,GAAG,KAAK,uBAAuB,KAAK,OAAO;AAAA,IAC9D;AAAA,IACA,iBAAiB;AAAA,MAChB;AAAA,MACA;AAAA,IACD;AAAA,IACA,cAAc,QAAQ,MAAM,MAAM;AACjC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,6BAA6B;AAC5D,YAAM,OAAO,QAAQ,cAAc,MAAM;AACzC,WAAK,aAAa,GAAG,KAAK,yBAAyB,KAAK,OAAO;AAAA,IAChE;AAAA,IACA,mBAAmB;AAAA,MAClB;AAAA,IACD;AAAA,IACA,YAAY;AAAA,IACZ,YAAY,QAAQ,MAAM,MAAM;AAC/B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,CAAC,UAAU,GAAG,YAAY,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACvE,UAAI,CAAC,YAAY,CAAC,aAAa;AAAQ,eAAO,KAAK,MAAM,2BAA2B;AACpF,YAAM,OAAO,QAAQ,YAAY,UAAU,YAAY;AACvD,YAAM,WAAW,aAAa,IAAI,OAAK,MAAM,SAAS,CAAC,GAAG,QAAQ,KAAK,CAAC,CAAC;AACzE,WAAK,aAAa,GAAG,KAAK,cAAc,KAAK,aAAa,QAAQ,eAAe,KAAK,OAAO,SAAS,MAAM,cAAc,KAAK,OAAO;AAAA,IACvI;AAAA,IACA,iBAAiB;AAAA,MAChB;AAAA,IACD;AAAA,IACA,eAAe;AAAA,IACf,eAAe,QAAQ,MAAM,MAAM;AAClC,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,8BAA8B;AAC7D,YAAM,eAAe,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AACxD,cAAQ,eAAe,YAAY;AACnC,YAAM,WAAW,aAAa,IAAI,OAAK,MAAM,SAAS,CAAC,GAAG,QAAQ,KAAK,CAAC,CAAC;AACzE,WAAK,aAAa,GAAG,KAAK,gBAAgB,KAAK,aAAa,QAAQ,eAAe,KAAK,OAAO,SAAS,MAAM,IAAI;AAAA,IACnH;AAAA,IACA,oBAAoB;AAAA,MACnB;AAAA,IACD;AAAA,IACA,WAAW,QAAQ,MAAM,MAAM;AAC9B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,YAAM,CAAC,UAAU,MAAM,IAAI,OAAO,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,CAAC;AAC9D,UAAI,CAAC,YAAY,CAAC;AAAQ,eAAO,KAAK,MAAM,0BAA0B;AACtE,YAAM,UAAU,aAAa,MAAM;AACnC,YAAM,OAAO,QAAQ,iBAAiB,UAAU,OAAO;AACvD,WAAK,aAAa,GAAG,KAAK,QAAQ,UAAU,IAAI,YAAY,WAAW,KAAK,IAAI,OAAO,aAAa,UAAU,IAAI,SAAS,aAAa,KAAK,OAAO;AAAA,IACrJ;AAAA,IACA,gBAAgB;AAAA,MACf;AAAA,IACD;AAAA,IACA,KAAK;AAAA,IACL,SAAS,QAAQ,MAAM,MAAM;AAC5B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,wBAAwB;AACvD,cAAQ,SAAS,MAAM,MAAM;AAAA,IAC9B;AAAA,IACA,cAAc;AAAA,MACb;AAAA,IACD;AAAA,IACA,IAAI,QAAQ,MAAM,MAAM;AACvB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,UAAI,CAAC;AAAQ,eAAO,KAAK,MAAM,mBAAmB;AAClD,cAAQ,IAAI,MAAM,aAAa,MAAM,CAAC;AAAA,IACvC;AAAA,IACA,SAAS;AAAA,MACR;AAAA,MACA;AAAA,IACD;AAAA,IACA,MAAM;AAAA,IACN,QAAQ,QAAQ,MAAM,MAAM;AAC3B,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,cAAQ,QAAQ;AAChB,WAAK,aAAa,GAAG,KAAK,uCAAuC;AAAA,IAClE;AAAA,IACA,KAAK,QAAQ,MAAM,MAAM;AACxB,YAAM,UAAU,KAAK,YAAY,OAAO;AACxC,cAAQ,WAAW,IAAI;AAEvB,cAAQ,YAAY;AACpB,WAAK,aAAa,GAAG,KAAK,iCAAiC;AAAA,IAC5D;AAAA,IACA,QAAQ,QAAQ,MAAM;AACrB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,kBAAkB,MAAM,IAAI;AAC1C,UAAI,KAAK,SAAS,iBAAiB;AAClC,eAAO,KAAK,WAAW,gCAAgC;AAAA,MACxD;AACA,WAAK,SAAS,kBAAkB;AAChC,WAAK,aAAa;AAClB,WAAK,UAAU,4CAA4C;AAAA,IAC5D;AAAA,IACA,OAAO,QAAQ,MAAM;AACpB,aAAO,KAAK,YAAY;AACxB,WAAK,SAAS,kBAAkB,MAAM,IAAI;AAC1C,UAAI,CAAC,KAAK,SAAS,iBAAiB;AACnC,eAAO,KAAK,WAAW,+BAA+B;AAAA,MACvD;AACA,aAAO,KAAK,SAAS;AACrB,WAAK,aAAa;AAClB,WAAK,UAAU,2CAA2C;AAAA,IAC3D;AAAA,IACA,SAAS;AAAA,IACT,UAAU;AACT,UAAI,CAAC,KAAK,aAAa;AAAG;AAC1B,YAAM,kBAAkB,CAAC,GAAG,MAAM,MAAM,OAAO,CAAC,EAAE,OAAO,OAAK,EAAE,QAAQ,OAAO,CAAC,EAAE,IAAI,OAAK,EAAE,KAAK;AAClG,WAAK,UAAU,qBAAqB,gBAAgB,KAAK,IAAI,KAAK,QAAQ;AAAA,IAC3E;AAAA,IACA,IAAI;AAAA,IACJ,OAAO;AACN,WAAK,MAAM,eAAe;AAAA,IAC3B;AAAA,EACD;AAAA,EACA,cAAc;AACb,QAAI,CAAC,KAAK,aAAa;AAAG;AAC1B,SAAK;AAAA,MACJ;AAAA,IAmCD;AAAA,EACD;AAAA,EACA,IAAI,QAAQ;AACX,SAAK,MAAM,qBAAqB,QAAQ;AAAA,EACzC;AAAA,EACA,IAAI,QAAQ;AACX,SAAK,MAAM,gBAAgB,QAAQ;AAAA,EACpC;AAAA,EACA,UAAU;AACT,SAAK,YAAY,OAAO;AACxB,SAAK,UAAU;AACf,WAAO;AAAA,EACR;AACD;AAEO,MAAM,eAAqC,WAAS;AAAA,EAC1D,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,SAAS;AAAA,IACR,CAAC,YAAY,KAAK,SAAS,mBAAmB,iBAAiB;AAAA,IAC/D,CAAC,WAAW,CAAC,KAAK,SAAS,mBAAmB,gBAAgB;AAAA,EAC/D;AACD;",
  "names": ["table"]
}
